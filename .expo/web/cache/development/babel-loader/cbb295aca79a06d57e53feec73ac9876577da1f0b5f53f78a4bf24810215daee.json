{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/expo-modules-core/src/ts-declarations/SharedObject.ts"],"sourcesContent":["import type { EventEmitter, EventsMap } from './EventEmitter';\n\n/**\n * Base class for all shared objects that extends the {@link EventEmitter} class.\n * The implementation is written in C++, installed through JSI and common for mobile platforms.\n */\nexport declare class SharedObject<TEventsMap extends EventsMap = Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements EventEmitter<TEventsMap>\n{\n  /**\n   * A function that detaches the JS and native objects to let the native object deallocate\n   * before the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native\n   * functions of the object will throw an error as it is no longer associated with its native counterpart.\n   *\n   * In most cases, you should never need to use this function, except some specific performance-critical cases when\n   * manual memory management makes sense and the native object is known to exclusively retain some native memory\n   * (such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use\n   * this object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase,\n   * for example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.\n   */\n  release(): void;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}