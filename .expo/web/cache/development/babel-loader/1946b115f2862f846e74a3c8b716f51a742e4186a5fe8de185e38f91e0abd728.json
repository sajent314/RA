{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createPerformanceLogger;\nexports.getCurrentTimestamp = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar Systrace = _interopRequireWildcard(require(\"../Performance/Systrace\"));\nvar _Performance = _interopRequireDefault(require(\"../WebPerformance/Performance\"));\nvar _infoLog = _interopRequireDefault(require(\"./infoLog\"));\nvar _global$nativeQPLTime;\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\nvar WEB_PERFORMANCE_PREFIX = 'global_perf_';\nvar performance = new _Performance.default();\nvar getCurrentTimestamp = exports.getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : global.performance.now.bind(global.performance);\nvar PerformanceLogger = function () {\n  function PerformanceLogger(isLoggingForWebPerformance) {\n    (0, _classCallCheck2.default)(this, PerformanceLogger);\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    this._pointExtras = {};\n    this._closed = false;\n    this._isLoggingForWebPerformance = false;\n    this._isLoggingForWebPerformance = isLoggingForWebPerformance === true;\n  }\n  return (0, _createClass2.default)(PerformanceLogger, [{\n    key: \"addTimespan\",\n    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: startTime,\n        endTime: endTime,\n        totalTime: endTime - (startTime || 0),\n        startExtras: startExtras,\n        endExtras: endExtras\n      };\n      if (this._isLoggingForWebPerformance) {\n        performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n          start: startTime,\n          end: endTime\n        });\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(performanceLogger) {\n      this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);\n      this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);\n      this._points = Object.assign({}, performanceLogger.getPoints(), this._points);\n      this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'clear');\n      }\n    }\n  }, {\n    key: \"clearCompleted\",\n    value: function clearCompleted() {\n      for (var _key in this._timespans) {\n        var _this$_timespans$_key;\n        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {\n          delete this._timespans[_key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n    }\n  }, {\n    key: \"currentTimestamp\",\n    value: function currentTimestamp() {\n      return getCurrentTimestamp();\n    }\n  }, {\n    key: \"getExtras\",\n    value: function getExtras() {\n      return this._extras;\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this._points;\n    }\n  }, {\n    key: \"getPointExtras\",\n    value: function getPointExtras() {\n      return this._pointExtras;\n    }\n  }, {\n    key: \"getTimespans\",\n    value: function getTimespans() {\n      return this._timespans;\n    }\n  }, {\n    key: \"hasTimespan\",\n    value: function hasTimespan(key) {\n      return !!this._timespans[key];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this._closed;\n    }\n  }, {\n    key: \"logEverything\",\n    value: function logEverything() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          var _this$_timespans$_key2;\n          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {\n            (0, _infoLog.default)(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n        (0, _infoLog.default)(this._extras);\n        for (var _key3 in this._points) {\n          if (this._points[_key3] != null) {\n            (0, _infoLog.default)(_key3 + ': ' + this._points[_key3] + 'ms');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"markPoint\",\n    value: function markPoint(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: markPoint - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._points[key] != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n        return;\n      }\n      this._points[key] = timestamp;\n      if (extras) {\n        this._pointExtras[key] = extras;\n      }\n      if (this._isLoggingForWebPerformance) {\n        performance.mark(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n          startTime: timestamp\n        });\n      }\n    }\n  }, {\n    key: \"removeExtra\",\n    value: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    }\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, value) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: setExtra - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._extras.hasOwnProperty(key)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n        return;\n      }\n      this._extras[key] = value;\n    }\n  }, {\n    key: \"startTimespan\",\n    value: function startTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: timestamp,\n        startExtras: extras\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);\n      }\n      if (this._isLoggingForWebPerformance) {\n        performance.mark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, {\n          startTime: timestamp\n        });\n      }\n    }\n  }, {\n    key: \"stopTimespan\",\n    value: function stopTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      var timespan = this._timespans[key];\n      if (!timespan || timespan.startTime == null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n        return;\n      }\n      if (timespan.endTime != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n        return;\n      }\n      timespan.endExtras = extras;\n      timespan.endTime = timestamp;\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);\n      }\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n      if (this._isLoggingForWebPerformance) {\n        performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n          start: `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n          end: timestamp\n        });\n      }\n    }\n  }]);\n}();\nfunction createPerformanceLogger(isLoggingForWebPerformance) {\n  return new PerformanceLogger(isLoggingForWebPerformance);\n}","map":{"version":3,"names":["Systrace","_interopRequireWildcard","require","_Performance","_interopRequireDefault","_infoLog","_global$nativeQPLTime","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_cookies","PRINT_TO_CONSOLE","WEB_PERFORMANCE_PREFIX","performance","Performance","getCurrentTimestamp","exports","global","nativeQPLTimestamp","now","bind","PerformanceLogger","isLoggingForWebPerformance","_classCallCheck2","_timespans","_extras","_points","_pointExtras","_closed","_isLoggingForWebPerformance","_createClass2","key","value","addTimespan","startTime","endTime","startExtras","endExtras","__DEV__","infoLog","totalTime","measure","start","end","append","performanceLogger","assign","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","_this$_timespans$_key","close","currentTimestamp","hasTimespan","isClosed","logEverything","_this$_timespans$_key2","markPoint","timestamp","arguments","length","undefined","extras","mark","removeExtra","setExtra","currentValue","attemptedValue","startTimespan","beginAsyncEvent","stopTimespan","timespan","endAsyncEvent","createPerformanceLogger"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {\n  Extras,\n  ExtraValue,\n  IPerformanceLogger,\n  Timespan,\n} from './IPerformanceLogger';\n\nimport * as Systrace from '../Performance/Systrace';\nimport Performance from '../WebPerformance/Performance';\nimport infoLog from './infoLog';\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n// This is the prefix for optional logging points/timespans as marks/measures via Performance API,\n// used to separate these internally from other marks/measures\nconst WEB_PERFORMANCE_PREFIX = 'global_perf_';\n\n// TODO: Remove once T143070419 is done\nconst performance = new Performance();\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? global.performance.now.bind(global.performance);\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n  _isLoggingForWebPerformance: boolean = false;\n\n  constructor(isLoggingForWebPerformance?: boolean) {\n    this._isLoggingForWebPerformance = isLoggingForWebPerformance === true;\n  }\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: startTime,\n        end: endTime,\n      });\n    }\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        startTime: timestamp,\n      });\n    }\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, {\n        startTime: timestamp,\n      });\n    }\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n        end: timestamp,\n      });\n    }\n  }\n}\n\n// Re-exporting for backwards compatibility with all the clients that\n// may still import it from this module.\nexport type {Extras, ExtraValue, IPerformanceLogger, Timespan};\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(\n  isLoggingForWebPerformance?: boolean,\n): IPerformanceLogger {\n  return new PerformanceLogger(isLoggingForWebPerformance);\n}\n"],"mappings":";;;;;;;;AAiBA,IAAAA,QAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,QAAA,GAAAD,sBAAA,CAAAF,OAAA;AAAgC,IAAAI,qBAAA;AAAA,SAAAL,wBAAAM,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAR,uBAAA,YAAAA,wBAAAM,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,cAAAM,EAAA,IAAAd,CAAA,gBAAAc,EAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,EAAA,OAAAP,CAAA,IAAAD,CAAA,GAAAW,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,EAAAc,EAAA,OAAAP,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAM,EAAA,EAAAP,CAAA,IAAAC,CAAA,CAAAM,EAAA,IAAAd,CAAA,CAAAc,EAAA,WAAAN,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAEhC,IAAMmB,QAAsC,GAAG,CAAC,CAAC;AAEjD,IAAMC,gBAAuB,GAAG,KAAK;AAIrC,IAAMC,sBAAsB,GAAG,cAAc;AAG7C,IAAMC,WAAW,GAAG,IAAIC,oBAAW,CAAC,CAAC;AAE9B,IAAMC,mBAAiC,GAAAC,OAAA,CAAAD,mBAAA,IAAA1B,qBAAA,GAC5C4B,MAAM,CAACC,kBAAkB,YAAA7B,qBAAA,GAAI4B,MAAM,CAACJ,WAAW,CAACM,GAAG,CAACC,IAAI,CAACH,MAAM,CAACJ,WAAW,CAAC;AAAC,IAEzEQ,iBAAiB;EAQrB,SAAAA,kBAAYC,0BAAoC,EAAE;IAAA,IAAAC,gBAAA,CAAAvB,OAAA,QAAAqB,iBAAA;IAAA,KAPlDG,UAAU,GAA+B,CAAC,CAAC;IAAA,KAC3CC,OAAO,GAAiC,CAAC,CAAC;IAAA,KAC1CC,OAAO,GAA6B,CAAC,CAAC;IAAA,KACtCC,YAAY,GAAkC,CAAC,CAAC;IAAA,KAChDC,OAAO,GAAY,KAAK;IAAA,KACxBC,2BAA2B,GAAY,KAAK;IAG1C,IAAI,CAACA,2BAA2B,GAAGP,0BAA0B,KAAK,IAAI;EACxE;EAAC,WAAAQ,aAAA,CAAA9B,OAAA,EAAAqB,iBAAA;IAAAU,GAAA;IAAAC,KAAA,EAED,SAAAC,WAAWA,CACTF,GAAW,EACXG,SAAiB,EACjBC,OAAe,EACfC,WAAoB,EACpBC,SAAkB,EAClB;MACA,IAAI,IAAI,CAACT,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,wDAAwD,EAAER,GAAG,CAAC;QACxE;QACA;MACF;MACA,IAAI,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,EAAE;QACxB,IAAIpB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,sEAAsE,EACtER,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,GAAG;QACrBG,SAAS,EAATA,SAAS;QACTC,OAAO,EAAPA,OAAO;QACPK,SAAS,EAAEL,OAAO,IAAID,SAAS,IAAI,CAAC,CAAC;QACrCE,WAAW,EAAXA,WAAW;QACXC,SAAS,EAATA;MACF,CAAC;MAED,IAAI,IAAI,CAACR,2BAA2B,EAAE;QACpChB,WAAW,CAAC4B,OAAO,CAAC,GAAG7B,sBAAsB,IAAImB,GAAG,EAAE,EAAE;UACtDW,KAAK,EAAER,SAAS;UAChBS,GAAG,EAAER;QACP,CAAC,CAAC;MACJ;IACF;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAED,SAAAY,MAAMA,CAACC,iBAAqC,EAAE;MAC5C,IAAI,CAACrB,UAAU,GAAAjB,MAAA,CAAAuC,MAAA,KACVD,iBAAiB,CAACE,YAAY,CAAC,CAAC,EAChC,IAAI,CAACvB,UAAU,CACnB;MACD,IAAI,CAACC,OAAO,GAAAlB,MAAA,CAAAuC,MAAA,KAAOD,iBAAiB,CAACG,SAAS,CAAC,CAAC,EAAK,IAAI,CAACvB,OAAO,CAAC;MAClE,IAAI,CAACC,OAAO,GAAAnB,MAAA,CAAAuC,MAAA,KAAOD,iBAAiB,CAACI,SAAS,CAAC,CAAC,EAAK,IAAI,CAACvB,OAAO,CAAC;MAClE,IAAI,CAACC,YAAY,GAAApB,MAAA,CAAAuC,MAAA,KACZD,iBAAiB,CAACK,cAAc,CAAC,CAAC,EAClC,IAAI,CAACvB,YAAY,CACrB;IACH;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAAmB,KAAKA,CAAA,EAAG;MACN,IAAI,CAAC3B,UAAU,GAAG,CAAC,CAAC;MACpB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAIf,gBAAgB,EAAE;QACpB,IAAA4B,gBAAO,EAAC,sBAAsB,EAAE,OAAO,CAAC;MAC1C;IACF;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAoB,cAAcA,CAAA,EAAG;MACf,KAAK,IAAMrB,IAAG,IAAI,IAAI,CAACP,UAAU,EAAE;QAAA,IAAA6B,qBAAA;QACjC,IAAI,EAAAA,qBAAA,OAAI,CAAC7B,UAAU,CAACO,IAAG,CAAC,qBAApBsB,qBAAA,CAAsBb,SAAS,KAAI,IAAI,EAAE;UAC3C,OAAO,IAAI,CAAChB,UAAU,CAACO,IAAG,CAAC;QAC7B;MACF;MACA,IAAI,CAACN,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAIf,gBAAgB,EAAE;QACpB,IAAA4B,gBAAO,EAAC,sBAAsB,EAAE,gBAAgB,CAAC;MACnD;IACF;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAsB,KAAKA,CAAA,EAAG;MACN,IAAI,CAAC1B,OAAO,GAAG,IAAI;IACrB;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAuB,gBAAgBA,CAAA,EAAW;MACzB,OAAOxC,mBAAmB,CAAC,CAAC;IAC9B;EAAC;IAAAgB,GAAA;IAAAC,KAAA,EAED,SAAAgB,SAASA,CAAA,EAAiC;MACxC,OAAO,IAAI,CAACvB,OAAO;IACrB;EAAC;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAAiB,SAASA,CAAA,EAA6B;MACpC,OAAO,IAAI,CAACvB,OAAO;IACrB;EAAC;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAkB,cAAcA,CAAA,EAA6B;MACzC,OAAO,IAAI,CAACvB,YAAY;IAC1B;EAAC;IAAAI,GAAA;IAAAC,KAAA,EAED,SAAAe,YAAYA,CAAA,EAA+B;MACzC,OAAO,IAAI,CAACvB,UAAU;IACxB;EAAC;IAAAO,GAAA;IAAAC,KAAA,EAED,SAAAwB,WAAWA,CAACzB,GAAW,EAAW;MAChC,OAAO,CAAC,CAAC,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC;IAC/B;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAED,SAAAyB,QAAQA,CAAA,EAAY;MAClB,OAAO,IAAI,CAAC7B,OAAO;IACrB;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAA0B,aAAaA,CAAA,EAAG;MACd,IAAI/C,gBAAgB,EAAE;QAEpB,KAAK,IAAMoB,KAAG,IAAI,IAAI,CAACP,UAAU,EAAE;UAAA,IAAAmC,sBAAA;UACjC,IAAI,EAAAA,sBAAA,OAAI,CAACnC,UAAU,CAACO,KAAG,CAAC,qBAApB4B,sBAAA,CAAsBnB,SAAS,KAAI,IAAI,EAAE;YAC3C,IAAAD,gBAAO,EAACR,KAAG,GAAG,IAAI,GAAG,IAAI,CAACP,UAAU,CAACO,KAAG,CAAC,CAACS,SAAS,GAAG,IAAI,CAAC;UAC7D;QACF;QAGA,IAAAD,gBAAO,EAAC,IAAI,CAACd,OAAO,CAAC;QAGrB,KAAK,IAAMM,KAAG,IAAI,IAAI,CAACL,OAAO,EAAE;UAC9B,IAAI,IAAI,CAACA,OAAO,CAACK,KAAG,CAAC,IAAI,IAAI,EAAE;YAC7B,IAAAQ,gBAAO,EAACR,KAAG,GAAG,IAAI,GAAG,IAAI,CAACL,OAAO,CAACK,KAAG,CAAC,GAAG,IAAI,CAAC;UAChD;QACF;MACF;IACF;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAED,SAAA4B,SAASA,CACP7B,GAAW,EAGX;MAAA,IAFA8B,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG/C,mBAAmB,CAAC,CAAC;MAAA,IAC1CkD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAACpC,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,sDAAsD,EAAER,GAAG,CAAC;QACtE;QACA;MACF;MACA,IAAI,IAAI,CAACL,OAAO,CAACK,GAAG,CAAC,IAAI,IAAI,EAAE;QAC7B,IAAIpB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,6EAA6E,EAC7ER,GACF,CAAC;QACH;QACA;MACF;MACA,IAAI,CAACL,OAAO,CAACK,GAAG,CAAC,GAAG8B,SAAS;MAC7B,IAAII,MAAM,EAAE;QACV,IAAI,CAACtC,YAAY,CAACI,GAAG,CAAC,GAAGkC,MAAM;MACjC;MAEA,IAAI,IAAI,CAACpC,2BAA2B,EAAE;QACpChB,WAAW,CAACqD,IAAI,CAAC,GAAGtD,sBAAsB,IAAImB,GAAG,EAAE,EAAE;UACnDG,SAAS,EAAE2B;QACb,CAAC,CAAC;MACJ;IACF;EAAC;IAAA9B,GAAA;IAAAC,KAAA,EAED,SAAAmC,WAAWA,CAACpC,GAAW,EAAe;MACpC,IAAMC,KAAK,GAAG,IAAI,CAACP,OAAO,CAACM,GAAG,CAAC;MAC/B,OAAO,IAAI,CAACN,OAAO,CAACM,GAAG,CAAC;MACxB,OAAOC,KAAK;IACd;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAAoC,QAAQA,CAACrC,GAAW,EAAEC,KAAiB,EAAE;MACvC,IAAI,IAAI,CAACJ,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,qDAAqD,EAAER,GAAG,CAAC;QACrE;QACA;MACF;MAEA,IAAI,IAAI,CAACN,OAAO,CAACpB,cAAc,CAAC0B,GAAG,CAAC,EAAE;QACpC,IAAIpB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,oEAAoE,EACpE;YAACR,GAAG,EAAHA,GAAG;YAAEsC,YAAY,EAAE,IAAI,CAAC5C,OAAO,CAACM,GAAG,CAAC;YAAEuC,cAAc,EAAEtC;UAAK,CAC9D,CAAC;QACH;QACA;MACF;MACA,IAAI,CAACP,OAAO,CAACM,GAAG,CAAC,GAAGC,KAAK;IAC3B;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAAuC,aAAaA,CACXxC,GAAW,EAGX;MAAA,IAFA8B,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG/C,mBAAmB,CAAC,CAAC;MAAA,IAC1CkD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAACpC,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,0DAA0D,EAC1DR,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,EAAE;QACxB,IAAIpB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,wEAAwE,EACxER,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,CAACP,UAAU,CAACO,GAAG,CAAC,GAAG;QACrBG,SAAS,EAAE2B,SAAS;QACpBzB,WAAW,EAAE6B;MACf,CAAC;MACDvD,QAAQ,CAACqB,GAAG,CAAC,GAAGhD,QAAQ,CAACyF,eAAe,CAACzC,GAAG,CAAC;MAC7C,IAAIpB,gBAAgB,EAAE;QACpB,IAAA4B,gBAAO,EAAC,sBAAsB,EAAE,SAAS,GAAGR,GAAG,CAAC;MAClD;MAEA,IAAI,IAAI,CAACF,2BAA2B,EAAE;QACpChB,WAAW,CAACqD,IAAI,CAAC,GAAGtD,sBAAsB,mBAAmBmB,GAAG,EAAE,EAAE;UAClEG,SAAS,EAAE2B;QACb,CAAC,CAAC;MACJ;IACF;EAAC;IAAA9B,GAAA;IAAAC,KAAA,EAED,SAAAyC,YAAYA,CACV1C,GAAW,EAGX;MAAA,IAFA8B,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG/C,mBAAmB,CAAC,CAAC;MAAA,IAC1CkD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAACpC,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,yDAAyD,EAAER,GAAG,CAAC;QACzE;QACA;MACF;MAEA,IAAM2C,QAAQ,GAAG,IAAI,CAAClD,UAAU,CAACO,GAAG,CAAC;MACrC,IAAI,CAAC2C,QAAQ,IAAIA,QAAQ,CAACxC,SAAS,IAAI,IAAI,EAAE;QAC3C,IAAIvB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,uEAAuE,EACvER,GACF,CAAC;QACH;QACA;MACF;MACA,IAAI2C,QAAQ,CAACvC,OAAO,IAAI,IAAI,EAAE;QAC5B,IAAIxB,gBAAgB,IAAI2B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,yEAAyE,EACzER,GACF,CAAC;QACH;QACA;MACF;MAEA2C,QAAQ,CAACrC,SAAS,GAAG4B,MAAM;MAC3BS,QAAQ,CAACvC,OAAO,GAAG0B,SAAS;MAC5Ba,QAAQ,CAAClC,SAAS,GAAGkC,QAAQ,CAACvC,OAAO,IAAIuC,QAAQ,CAACxC,SAAS,IAAI,CAAC,CAAC;MACjE,IAAIvB,gBAAgB,EAAE;QACpB,IAAA4B,gBAAO,EAAC,sBAAsB,EAAE,OAAO,GAAGR,GAAG,CAAC;MAChD;MAEA,IAAIrB,QAAQ,CAACqB,GAAG,CAAC,IAAI,IAAI,EAAE;QACzBhD,QAAQ,CAAC4F,aAAa,CAAC5C,GAAG,EAAErB,QAAQ,CAACqB,GAAG,CAAC,CAAC;QAC1C,OAAOrB,QAAQ,CAACqB,GAAG,CAAC;MACtB;MAEA,IAAI,IAAI,CAACF,2BAA2B,EAAE;QACpChB,WAAW,CAAC4B,OAAO,CAAC,GAAG7B,sBAAsB,IAAImB,GAAG,EAAE,EAAE;UACtDW,KAAK,EAAE,GAAG9B,sBAAsB,mBAAmBmB,GAAG,EAAE;UACxDY,GAAG,EAAEkB;QACP,CAAC,CAAC;MACJ;IACF;EAAC;AAAA;AAYY,SAASe,uBAAuBA,CAC7CtD,0BAAoC,EAChB;EACpB,OAAO,IAAID,iBAAiB,CAACC,0BAA0B,CAAC;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}