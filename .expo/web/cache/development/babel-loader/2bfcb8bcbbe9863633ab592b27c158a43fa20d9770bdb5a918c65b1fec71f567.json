{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\stjones\\Desktop\\Ra_App\\node_modules\\react-native-screens\\src\\components\\gamma\\SplitViewHost.types.ts"],"sourcesContent":["import type { NativeSyntheticEvent, ViewProps } from 'react-native';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype GenericEmptyEvent = Readonly<{}>;\n\nexport type DisplayModeWillChangeEvent = {\n  currentDisplayMode: string;\n  nextDisplayMode: string;\n};\n\nexport type SplitViewDisplayModeButtonVisibility =\n  | 'always'\n  | 'automatic'\n  | 'never';\n\nexport type SplitViewSplitBehavior =\n  | 'automatic'\n  | 'displace'\n  | 'overlay'\n  | 'tile';\n\nexport type SplitViewPrimaryEdge = 'leading' | 'trailing';\n\nexport type SplitViewDisplayMode =\n  | 'automatic'\n  | 'secondaryOnly'\n  | 'oneBesideSecondary'\n  | 'oneOverSecondary'\n  | 'twoBesideSecondary'\n  | 'twoOverSecondary'\n  | 'twoDisplaceSecondary';\n\nexport type SplitViewHostOrientation =\n  | 'inherit'\n  | 'all'\n  | 'allButUpsideDown'\n  | 'portrait'\n  | 'portraitUp'\n  | 'portraitDown'\n  | 'landscape'\n  | 'landscapeLeft'\n  | 'landscapeRight';\n\nexport interface SplitViewColumnMetrics {\n  /**\n   * @summary Minimum width for the primary sidebar.\n   *\n   * Specifies the minimum width for the primary column in the SplitView layout, typically representing the leftmost sidebar.\n   */\n  minimumPrimaryColumnWidth?: number;\n  /**\n   * @summary Maximum width for the primary sidebar.\n   *\n   * Specifies the maximum width (in points) for the primary column in the SplitView layout, typically representing the leftmost sidebar.\n   */\n  maximumPrimaryColumnWidth?: number;\n  /**\n   * @summary Preferred width for the primary sidebar.\n   *\n   * Specifies the preferred width (in points or as a fraction for percentage width support) for the primary column in the SplitView layout, typically representing the leftmost sidebar.\n   */\n  preferredPrimaryColumnWidthOrFraction?: number;\n  /**\n   * @summary Minimum width for the intermediate sidebar.\n   *\n   * Specifies the minimum width (in points) for the supplementary column in the SplitView layout, typically representing the intermediate sidebar.\n   */\n  minimumSupplementaryColumnWidth?: number;\n  /**\n   * @summary Maximum width for the intermediate sidebar.\n   *\n   * Specifies the maximum width (in points) for the supplementary column in the SplitView layout, typically representing the intermediate sidebar.\n   */\n  maximumSupplementaryColumnWidth?: number;\n  /**\n   * @summary Preferred width for the intermediate sidebar.\n   *\n   * Specifies the preferred width (in points or as a fraction for percentage width support) for the supplementary column in the SplitView layout, typically representing the intermediate sidebar.\n   */\n  preferredSupplementaryColumnWidthOrFraction?: number;\n  /**\n   * @summary Minimum width for the secondary component.\n   *\n   * Specifies the minimum width (in points) for the secondary column in the SplitView layout, typically for the view with the main content.\n   *\n   * @supported iOS 26 or higher\n   */\n  minimumSecondaryColumnWidth?: number;\n  /**\n   * @summary Preferred width for the secondary component.\n   *\n   * Specifies the preferred width (in points or as a fraction for percentage width support) for the secondary column in the SplitView layout, typically for the view with the main content.\n   *\n   * @supported iOS 26 or higher\n   */\n  preferredSecondaryColumnWidthOrFraction?: number;\n  /**\n   * @summary Minimum width for the inspector component.\n   *\n   * Specifies the minimum width (in points) for the inspector column in the SplitView layout, typically the view which is providing additional data about the secondary column.\n   *\n   * @supported iOS 26 or higher\n   */\n  minimumInspectorColumnWidth?: number;\n  /**\n   * @summary Maximum width for the inspector component.\n   *\n   * Specifies the maximum width (in points) for the inspector column in the SplitView layout, typically the view which is providing additional data about the secondary column.\n   *\n   * @supported iOS 26 or higher\n   */\n  maximumInspectorColumnWidth?: number;\n  /**\n   * @summary Preferred width for the inspector component.\n   *\n   * Specifies the preferred width (in points or as a fraction for percentage width support) for the inspector column in the SplitView layout, typically the view which is providing additional data about the secondary column.\n   *\n   * @supported iOS 26 or higher\n   */\n  preferredInspectorColumnWidthOrFraction?: number;\n}\nexport interface SplitViewHostProps extends ViewProps {\n  children?: React.ReactNode;\n\n  /**\n   * @summary An object describing bounds for column widths.\n   *\n   * It supports definitions for the following columns:\n   *\n   * - `primary` - the leftmost sidebar\n   * - `supplementary` - the intermediate sidebar\n   *\n   * On iOS 26 or higher, it also supports definitions for:\n   *\n   * - `secondary` - the view with the main content\n   * - `inspector` - the view which is providing additional data about the secondary column\n   */\n  columnMetrics?: SplitViewColumnMetrics;\n  /**\n   * @summary Determines whether the button for changing the SplitView display mode is visible on the screen.\n   *\n   * The following values are currently supported:\n   *\n   * - `automatic` - the visibility of the display mode button is set by system\n   * - `always` – the display mode button is always visible\n   * - `never` – the display mode button is always hidden\n   *\n   * The supported values corresponds to the official UIKit documentation:\n   * @see {@link https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymodebuttonvisibility-swift.enum|UISplitViewController.DisplayModeButtonVisibility}\n   *\n   * @default automatic\n   */\n  displayModeButtonVisibility?: SplitViewDisplayModeButtonVisibility;\n  /**\n   * @summary A callback that gets invoked when the SplitView was collapsed to a single column.\n   */\n  onCollapse?: (e: NativeSyntheticEvent<GenericEmptyEvent>) => void;\n  /**\n   * @summary A callback that gets invoked when the SplitView displayMode has changed.\n   *\n   * The purpose of this callback is tracking displayMode updates on host from the JS side.\n   * These updates might be a consequence of some native interactions, like pressing native button or performing swipe gesture.\n   */\n  onDisplayModeWillChange?: (\n    e: NativeSyntheticEvent<DisplayModeWillChangeEvent>,\n  ) => void;\n  /**\n   * @summary A callback that gets invoked when the SplitView was expanded to multiple columns.\n   */\n  onExpand?: (e: NativeSyntheticEvent<GenericEmptyEvent>) => void;\n  /**\n   * @summary A callback that gets invoked when the SplitView inspector is either programmatically hidden (in column presentation) or dismissed (in modal presentation).\n   *\n   * The purpose of this callback depends on whether the SplitView is collapsed or expanded.\n   *\n   * @supported iOS 26 or higher\n   */\n  onInspectorHide?: (e: NativeSyntheticEvent<GenericEmptyEvent>) => void;\n  /**\n   * @summary Specifies supported orientations for the tab screen.\n   *\n   * Procedure for determining supported orientations:\n   * 1. Traversal initiates from the root component and moves to the\n   *    deepest child possible.\n   * 2. Components are queried for their supported orientations:\n   *    - if `orientation` is explicitly set (e.g., `portrait`,\n   *      `landscape`), it is immediately used,\n   *    - if `orientation` is set to `inherit`, the parent component\n   *      is queried.\n   *\n   * The following values are currently supported:\n   *\n   * - `inherit` - tab screen supports the same orientations as parent\n   *   component,\n   * - `all` - tab screen supports all orientations,\n   * - `allButUpsideDown` - tab screen supports all but the upside-down\n   *   portrait interface orientation,\n   * - `portrait` - tab screen supports both portrait-up and portrait-down\n   *   interface orientations,\n   * - 'portraitUp' - tab screen supports a portrait-up interface\n   *   orientation,\n   * - `portraitDown` - tab screen supports a portrait-down interface\n   *   orientation,\n   *   interface orientation,\n   * - `landscape` - tab screen supports both landscape-left and\n   *   landscape-right interface orientations,\n   * - `landscapeLeft` - tab screen supports landscape-left interface\n   *   orientaion,\n   * - `landscapeRight` - tab screen supports landscape-right interface\n   *   orientaion.\n   *\n   * The supported values (apart from `inherit`) correspond to the official\n   * UIKit documentation:\n   *\n   * @see {@link https://developer.apple.com/documentation/uikit/uiinterfaceorientationmask|UIInterfaceOrientationMask}\n   *\n   * @default inherit\n   *\n   * @platform ios\n   */\n  orientation?: SplitViewHostOrientation;\n  /**\n   * @summary Determines whether gestures are enabled to change the display mode.\n   */\n  presentsWithGesture?: boolean;\n  /**\n   * @summary Specifies the display mode which will be preferred to use, if the layout requirements are met.\n   *\n   * Preferred means that we may only suggest the OS which layout we're expecting, but the final decision is dependent on the device's type and size class.\n   *\n   * The following values are currently supported:\n   *\n   * - `automatic` - display mode is chosen by the OS, the appropriate display mode is based on the device and the current app size\n   * - `secondaryOnly` – only the secondary column is displayed\n   * - `oneBesideSecondary` – a sidebar is displayed side-by-side with the secondary column\n   * - `twoBesideSecondary` – two sidebars are displayed side-by-side with the secondary column\n   * - `oneOverSecondary` – a one sidebar is displayed over the secondary column\n   * - `twoOverSecondary` – two sidebars are displayed over the secondary column\n   * - `twoDisplaceSecondary` – two sidebars are displacind the secondary column, moving it partially offscreen\n   *\n   * The supported values corresponds to the official UIKit documentation:\n   * @see {@link https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode-swift.enum|UISplitViewController.DisplayMode}\n   *\n   * @default automatic\n   */\n  preferredDisplayMode?: SplitViewDisplayMode;\n  /**\n   * @summary Specifies the split behavior which will be preferred to use, if the layout requirements are met.\n   *\n   * Preferred means that we may only suggest the OS which layout we're expecting, but the final decision is dependent on the device's type and size class.\n   *\n   * The following values are currently supported:\n   *\n   * - `automatic` - chosen by the OS, the appropriate split behavior is based on the device and the current app size\n   * - `displace` – the main column is moved partially offscreen, making a space for sidebars\n   * - `overlay` – the sidebars are partially covering main column\n   * - `tile` – the sidebars appears side-by-side with the main column\n   *\n   * The supported values corresponds to the official UIKit documentation:\n   * @see {@link https://developer.apple.com/documentation/uikit/uisplitviewcontroller/splitbehavior-swift.enum|UISplitViewController.SplitBehavior}\n   *\n   * @default automatic\n   */\n  preferredSplitBehavior?: SplitViewSplitBehavior;\n  /**\n   * @summary Indicates on which side primary sidebar is placed, affecting the split view layout.\n   *\n   * The following values are currently supported:\n   *\n   * - `leading` - primary sidebar is placed on the leading edge of the interface\n   * - `trailing` - primary sidebar is placed on the trailing edge of the interface\n   *\n   * The supported values corresponds to the official UIKit documentation:\n   * @see {@link https://developer.apple.com/documentation/uikit/uisplitviewcontroller/primaryedge-swift.enum|UISplitViewController.PrimaryEdge}\n   *\n   * @default leading\n   */\n  primaryEdge?: SplitViewPrimaryEdge;\n  /**\n   * @summary Determines whether inspector column should be displayed.\n   *\n   * Inspector will be displayed on the trailing edge of the main (secondary) column (for expanded SplitView) or as a modal (for collapsed SplitView).\n   * The result on the interface for this prop depends on whether the SplitView is collapsed or expanded.\n   *\n   * @supported iOS 26 or higher\n   */\n  showInspector?: boolean;\n  /**\n   * @summary Determines whether a button to toggle to and from secondaryOnly display mode is visible.\n   */\n  showSecondaryToggleButton?: boolean;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}