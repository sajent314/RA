{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CellRenderMask = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar CellRenderMask = exports.CellRenderMask = function () {\n  function CellRenderMask(numCells) {\n    (0, _classCallCheck2.default)(this, CellRenderMask);\n    (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n    this._numCells = numCells;\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [{\n        first: 0,\n        last: numCells - 1,\n        isSpacer: true\n      }];\n    }\n  }\n  return (0, _createClass2.default)(CellRenderMask, [{\n    key: \"enumerateRegions\",\n    value: function enumerateRegions() {\n      return this._regions;\n    }\n  }, {\n    key: \"addCells\",\n    value: function addCells(cells) {\n      var _this$_regions;\n      (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n      if (cells.last < cells.first) {\n        return;\n      }\n      var _this$_findRegion = this._findRegion(cells.first),\n        _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),\n        firstIntersect = _this$_findRegion2[0],\n        firstIntersectIdx = _this$_findRegion2[1];\n      var _this$_findRegion3 = this._findRegion(cells.last),\n        _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),\n        lastIntersect = _this$_findRegion4[0],\n        lastIntersectIdx = _this$_findRegion4[1];\n      if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n        return;\n      }\n      var newLeadRegion = [];\n      var newTailRegion = [];\n      var newMainRegion = Object.assign({}, cells, {\n        isSpacer: false\n      });\n      if (firstIntersect.first < newMainRegion.first) {\n        if (firstIntersect.isSpacer) {\n          newLeadRegion.push({\n            first: firstIntersect.first,\n            last: newMainRegion.first - 1,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.first = firstIntersect.first;\n        }\n      }\n      if (lastIntersect.last > newMainRegion.last) {\n        if (lastIntersect.isSpacer) {\n          newTailRegion.push({\n            first: newMainRegion.last + 1,\n            last: lastIntersect.last,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.last = lastIntersect.last;\n        }\n      }\n      var replacementRegions = [].concat(newLeadRegion, [newMainRegion], newTailRegion);\n      var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n      (_this$_regions = this._regions).splice.apply(_this$_regions, [firstIntersectIdx, numRegionsToDelete].concat((0, _toConsumableArray2.default)(replacementRegions)));\n    }\n  }, {\n    key: \"numCells\",\n    value: function numCells() {\n      return this._numCells;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {\n        return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;\n      });\n    }\n  }, {\n    key: \"_findRegion\",\n    value: function _findRegion(cellIdx) {\n      var firstIdx = 0;\n      var lastIdx = this._regions.length - 1;\n      while (firstIdx <= lastIdx) {\n        var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n        var middleRegion = this._regions[middleIdx];\n        if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n          return [middleRegion, middleIdx];\n        } else if (cellIdx < middleRegion.first) {\n          lastIdx = middleIdx - 1;\n        } else if (cellIdx > middleRegion.last) {\n          firstIdx = middleIdx + 1;\n        }\n      }\n      (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);\n    }\n  }]);\n}();","map":{"version":3,"names":["_invariant","_interopRequireDefault","require","CellRenderMask","exports","numCells","_classCallCheck2","default","invariant","_numCells","_regions","first","last","isSpacer","_createClass2","key","value","enumerateRegions","addCells","cells","_this$_regions","_this$_findRegion","_findRegion","_this$_findRegion2","_slicedToArray2","firstIntersect","firstIntersectIdx","_this$_findRegion3","_this$_findRegion4","lastIntersect","lastIntersectIdx","newLeadRegion","newTailRegion","newMainRegion","Object","assign","push","replacementRegions","concat","numRegionsToDelete","splice","apply","_toConsumableArray2","equals","other","length","every","region","i","cellIdx","firstIdx","lastIdx","middleIdx","Math","floor","middleRegion"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/@react-native/virtualized-lists/Lists/CellRenderMask.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport type CellRegion = {\n  first: number,\n  last: number,\n  isSpacer: boolean,\n};\n\nexport class CellRenderMask {\n  _numCells: number;\n  _regions: Array<CellRegion>;\n\n  constructor(numCells: number) {\n    invariant(\n      numCells >= 0,\n      'CellRenderMask must contain a non-negative number os cells',\n    );\n\n    this._numCells = numCells;\n\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [\n        {\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true,\n        },\n      ];\n    }\n  }\n\n  enumerateRegions(): $ReadOnlyArray<CellRegion> {\n    return this._regions;\n  }\n\n  addCells(cells: {first: number, last: number}): void {\n    invariant(\n      cells.first >= 0 &&\n        cells.first < this._numCells &&\n        cells.last >= -1 &&\n        cells.last < this._numCells &&\n        cells.last >= cells.first - 1,\n      'CellRenderMask.addCells called with invalid cell range',\n    );\n\n    // VirtualizedList uses inclusive ranges, where zero-count states are\n    // possible. E.g. [0, -1] for no cells, starting at 0.\n    if (cells.last < cells.first) {\n      return;\n    }\n\n    const [firstIntersect, firstIntersectIdx] = this._findRegion(cells.first);\n    const [lastIntersect, lastIntersectIdx] = this._findRegion(cells.last);\n\n    // Fast-path if the cells to add are already all present in the mask. We\n    // will otherwise need to do some mutation.\n    if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n      return;\n    }\n\n    // We need to replace the existing covered regions with 1-3 new regions\n    // depending whether we need to split spacers out of overlapping regions.\n    const newLeadRegion: Array<CellRegion> = [];\n    const newTailRegion: Array<CellRegion> = [];\n    const newMainRegion: CellRegion = {\n      ...cells,\n      isSpacer: false,\n    };\n\n    if (firstIntersect.first < newMainRegion.first) {\n      if (firstIntersect.isSpacer) {\n        newLeadRegion.push({\n          first: firstIntersect.first,\n          last: newMainRegion.first - 1,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.first = firstIntersect.first;\n      }\n    }\n\n    if (lastIntersect.last > newMainRegion.last) {\n      if (lastIntersect.isSpacer) {\n        newTailRegion.push({\n          first: newMainRegion.last + 1,\n          last: lastIntersect.last,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.last = lastIntersect.last;\n      }\n    }\n\n    const replacementRegions: Array<CellRegion> = [\n      ...newLeadRegion,\n      newMainRegion,\n      ...newTailRegion,\n    ];\n    const numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n    this._regions.splice(\n      firstIntersectIdx,\n      numRegionsToDelete,\n      ...replacementRegions,\n    );\n  }\n\n  numCells(): number {\n    return this._numCells;\n  }\n\n  equals(other: CellRenderMask): boolean {\n    return (\n      this._numCells === other._numCells &&\n      this._regions.length === other._regions.length &&\n      this._regions.every(\n        (region, i) =>\n          region.first === other._regions[i].first &&\n          region.last === other._regions[i].last &&\n          region.isSpacer === other._regions[i].isSpacer,\n      )\n    );\n  }\n\n  _findRegion(cellIdx: number): [CellRegion, number] {\n    let firstIdx = 0;\n    let lastIdx = this._regions.length - 1;\n\n    while (firstIdx <= lastIdx) {\n      const middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n      const middleRegion = this._regions[middleIdx];\n\n      if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n        return [middleRegion, middleIdx];\n      } else if (cellIdx < middleRegion.first) {\n        lastIdx = middleIdx - 1;\n      } else if (cellIdx > middleRegion.last) {\n        firstIdx = middleIdx + 1;\n      }\n    }\n\n    invariant(false, `A region was not found containing cellIdx ${cellIdx}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}