{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\stjones\\Desktop\\Ra_App\\node_modules\\react-native-screens\\src\\components\\bottom-tabs\\BottomTabsScreen.types.ts"],"sourcesContent":["import type {\n  ColorValue,\n  ImageSourcePropType,\n  NativeSyntheticEvent,\n  TextStyle,\n  ViewProps,\n} from 'react-native';\n\nexport type EmptyObject = Record<string, never>;\n\nexport type BottomTabsScreenEventHandler<T> = (\n  event: NativeSyntheticEvent<T>,\n) => void;\n\nexport type LifecycleStateChangeEvent = Readonly<{\n  previousState: number;\n  newState: number;\n}>;\n\n// iOS-specific: SFSymbol usage\nexport interface SFIcon {\n  sfSymbolName: string;\n}\n\n// iOS-specific\nexport interface ImageIcon {\n  imageSource: ImageSourcePropType;\n}\n\n// iOS-specific: image as a template usage\nexport interface TemplateIcon {\n  templateSource: ImageSourcePropType;\n}\n\n// iOS-specific: SFSymbol, image as a template usage\nexport type Icon = SFIcon | ImageIcon | TemplateIcon;\n\n// iOS-specific\nexport type BottomTabsScreenBlurEffect =\n  | 'none'\n  | 'systemDefault'\n  | 'extraLight'\n  | 'light'\n  | 'dark'\n  | 'regular'\n  | 'prominent'\n  | 'systemUltraThinMaterial'\n  | 'systemThinMaterial'\n  | 'systemMaterial'\n  | 'systemThickMaterial'\n  | 'systemChromeMaterial'\n  | 'systemUltraThinMaterialLight'\n  | 'systemThinMaterialLight'\n  | 'systemMaterialLight'\n  | 'systemThickMaterialLight'\n  | 'systemChromeMaterialLight'\n  | 'systemUltraThinMaterialDark'\n  | 'systemThinMaterialDark'\n  | 'systemMaterialDark'\n  | 'systemThickMaterialDark'\n  | 'systemChromeMaterialDark';\n\nexport type BottomTabsSystemItem =\n  | 'bookmarks'\n  | 'contacts'\n  | 'downloads'\n  | 'favorites'\n  | 'featured'\n  | 'history'\n  | 'more'\n  | 'mostRecent'\n  | 'mostViewed'\n  | 'recents'\n  | 'search'\n  | 'topRated';\n\n// Currently iOS-only\nexport type BottomTabsScreenOrientation =\n  | 'inherit'\n  | 'all'\n  | 'allButUpsideDown'\n  | 'portrait'\n  | 'portraitUp'\n  | 'portraitDown'\n  | 'landscape'\n  | 'landscapeLeft'\n  | 'landscapeRight';\n\n// iOS-specific\nexport interface BottomTabsScreenAppearance {\n  /**\n   * @summary Specifies the appearance of tab bar items when they are in stacked layout.\n   *\n   * Tab bar items in stacked layout have the icon above the title.\n   * Stacked layout is used e.g. on the iPhone in portrait orientation.\n   *\n   * @platform ios\n   */\n  stacked?: BottomTabsScreenItemAppearance;\n  /**\n   * @summary Specifies the appearance of tab bar items when they are in inline layout.\n   *\n   * Tab bar items in inline layout have the icon next to the title.\n   * Inline layout is used in regular-width environments, e.g. in landscape orientation on the iPhone 16 Pro Max.\n   *\n   * Complete list of size classes for iOS and iPadOS devices is available in Apple's Human Interface Guidelines:\n   * @see {@link https://developer.apple.com/design/human-interface-guidelines/layout#iOS-iPadOS-device-size-classes|HIG: Device size classes}\n   *\n   * @platform ios\n   */\n  inline?: BottomTabsScreenItemAppearance;\n  /**\n   * @summary Specifies the appearance of tab bar items when they are in compact inline layout.\n   *\n   * Tab bar items in compact inline layout have the icon next to the title.\n   * Compact inline layout is used in compact-width environments, e.g. in landscape orientation on the iPhone 16 Pro.\n   *\n   * Complete list of size classes for iOS and iPadOS devices is available in Apple's Human Interface Guidelines:\n   * @see {@link https://developer.apple.com/design/human-interface-guidelines/layout#iOS-iPadOS-device-size-classes|HIG: Device size classes}\n   *\n   * @platform ios\n   */\n  compactInline?: BottomTabsScreenItemAppearance;\n\n  /**\n   * @summary Specifies the background color for the entire tab bar when tab screen is selected.\n   *\n   * This property does not affect the tab bar starting from iOS 26.\n   *\n   * @platform ios\n   * @supported iOS 18 or lower\n   */\n  tabBarBackgroundColor?: ColorValue;\n  /**\n   * @summary Specifies the blur effect applied to the tab bar when tab screen is selected.\n   *\n   * Works with backgroundColor's alpha < 1.\n   *\n   * This property does not affect the tab bar starting from iOS 26.\n   *\n   * The following values are currently supported:\n   *\n   * - `none` - disables blur effect\n   * - `systemDefault` - uses UIKit's default tab bar blur effect\n   * - one of styles mapped from UIKit's UIBlurEffectStyle, e.g. `systemUltraThinMaterial`\n   *\n   * Complete list of possible blur effect styles is available in the official UIKit documentation:\n   * @see {@link https://developer.apple.com/documentation/uikit/uiblureffect/style|UIBlurEffect.Style}\n   *\n   * @default systemDefault\n   *\n   * @platform ios\n   * @supported iOS 18 or lower\n   */\n  tabBarBlurEffect?: BottomTabsScreenBlurEffect;\n  /**\n   * @summary Specifies the shadow color for the tab bar when tab screen is selected.\n   *\n   * This property does not affect the tab bar starting from iOS 26.\n   *\n   * @platform ios\n   * @supported iOS 18 or lower\n   */\n  tabBarShadowColor?: ColorValue;\n}\n\n// iOS-specific\nexport interface BottomTabsScreenItemAppearance {\n  /**\n   * Specifies the tab bar item appearance when it's enabled, unselected, and not the focused item.\n   *\n   * @platform ios\n   */\n  normal?: BottomTabsScreenItemStateAppearance;\n  /**\n   * Specifies the tab bar item appearance when it's selected.\n   *\n   * @platform ios\n   */\n  selected?: BottomTabsScreenItemStateAppearance;\n  /**\n   * Specifies the tab bar item appearance when it's focused.\n   *\n   * @platform ios\n   */\n  focused?: BottomTabsScreenItemStateAppearance;\n  /**\n   * Specifies the tab bar item appearance when it's disabled.\n   *\n   * @platform ios\n   */\n  disabled?: BottomTabsScreenItemStateAppearance;\n}\n\n// iOS-specific\nexport interface BottomTabsScreenItemStateAppearance {\n  /**\n   * @summary Specifies the font family used for the title of each tab bar item\n   * when tab screen is selected.\n   *\n   * @platform ios\n   */\n  tabBarItemTitleFontFamily?: TextStyle['fontFamily'];\n  /**\n   * @summary Specifies the font size used for the title of each tab bar item\n   * when tab screen is selected.\n   *\n   * @platform ios\n   */\n  tabBarItemTitleFontSize?: TextStyle['fontSize'];\n  /**\n   * @summary Specifies the font weight used for the title of each tab bar item\n   * when tab screen is selected.\n   *\n   * @platform ios\n   */\n  tabBarItemTitleFontWeight?: TextStyle['fontWeight'];\n  /**\n   * @summary Specifies the font style used for the title of each tab bar item\n   * when tab screen is selected.\n   *\n   * @platform ios\n   */\n  tabBarItemTitleFontStyle?: TextStyle['fontStyle'];\n  /**\n   * @summary Specifies the font color used for the title of each tab bar item\n   * when tab screen is selected.\n   *\n   * Overrides the color defined in `tabBarTintColor` and `tabBarItemIconColor`.\n   *\n   * @platform ios\n   */\n  tabBarItemTitleFontColor?: TextStyle['color'];\n  /**\n   * @summary Specifies the title offset for each tab bar item when tab screen\n   * is selected.\n   *\n   * Depending on the iOS version and the device's interface orientation,\n   * this setting may affect the alignment of the text, badge and icon.\n   *\n   * @platform ios\n   */\n  tabBarItemTitlePositionAdjustment?: {\n    horizontal?: number;\n    vertical?: number;\n  };\n  /**\n   * @summary Specifies the icon color for each tab bar item when tab screen\n   * is selected.\n   *\n   * This also impacts the title text color.\n   *\n   * Starting from iOS 26, it only applies to selected tab bar item. Other items\n   * adopt a dark or light appearance depending on the theme of the tab bar.\n   *\n   * Is overridden by `tabBarItemTitleFontColor` (for title text color).\n   * Overrides `tabBarTintColor`.\n   *\n   * @platform ios\n   */\n  tabBarItemIconColor?: ColorValue;\n  /**\n   * @summary Specifies the background color of badges for each tab bar item\n   * when tab screen is selected.\n   *\n   * @platform ios\n   */\n  tabBarItemBadgeBackgroundColor?: ColorValue;\n}\n\nexport interface BottomTabsScreenProps {\n  children?: ViewProps['children'];\n  /**\n   * @summary Defines what should be rendered when tab screen is frozen.\n   *\n   * @see {@link https://github.com/software-mansion/react-freeze|`react-freeze`'s GitHub repository} for more information about `react-freeze`.\n   *\n   * @platform android, ios\n   */\n  placeholder?: React.ReactNode | undefined;\n\n  // #region Control\n  /**\n   * @summary Determines selected tab.\n   *\n   * In controlled container mode, determines if tab screen is currently\n   * focused.\n   *\n   * In managed container mode, it only indicates initially selected tab.\n   *\n   * There should be exactly one focused screen at any given time.\n   *\n   * @platform android, ios\n   */\n  isFocused?: boolean;\n  /**\n   * @summary Identifies screen, e.g. when receiving onNativeFocusChange event.\n   *\n   * @platform android, ios\n   */\n  tabKey: string;\n  // #endregion\n\n  // #region General\n  /**\n   * @summary Title of the tab screen, displayed in the tab bar item.\n   *\n   * @platform android, ios\n   */\n  title?: string;\n  /**\n   * @summary Specifies content of tab bar item badge.\n   *\n   * On iOS, badge is displayed as regular string.\n   *\n   * On Android, the value is interpreted in the following order:\n   * - if the string can be parsed to integer, displays the value as a number;\n   * - otherwise if the string is empty, displays \"small dot\" badge;\n   * - otherwise, displays the value as a text.\n   *\n   * @platform android, ios\n   */\n  badgeValue?: string;\n  /**\n   * @summary Specifies supported orientations for the tab screen.\n   *\n   * Procedure for determining supported orientations:\n   * 1. Traversal initiates from the root component and moves to the\n   *    deepest child possible.\n   * 2. Components are queried for their supported orientations:\n   *    - if `orientation` is explicitly set (e.g., `portrait`,\n   *      `landscape`), it is immediately used,\n   *    - if `orientation` is set to `inherit`, the parent component\n   *      is queried.\n   *\n   * Note that:\n   * - some components (like `SplitViewHost`) may choose not to query\n   *   its child components,\n   * - Stack v4 implementation **ALWAYS** returns some supported\n   *   orientations (`allButUpsideDown` by default), overriding\n   *   orientation from tab screen.\n   *\n   * The following values are currently supported:\n   *\n   * - `inherit` - tab screen supports the same orientations as parent\n   *   component,\n   * - `all` - tab screen supports all orientations,\n   * - `allButUpsideDown` - tab screen supports all but the upside-down\n   *   portrait interface orientation,\n   * - `portrait` - tab screen supports both portrait-up and portrait-down\n   *   interface orientations,\n   * - 'portraitUp' - tab screen supports a portrait-up interface\n   *   orientation,\n   * - `portraitDown` - tab screen supports a portrait-down interface\n   *   orientation,\n   * - `landscape` - tab screen supports both landscape-left and\n   *   landscape-right interface orientations,\n   * - `landscapeLeft` - tab screen supports landscape-left interface\n   *   orientaion,\n   * - `landscapeRight` - tab screen supports landscape-right interface\n   *   orientaion.\n   *\n   * The supported values (apart from `inherit`, `portrait`, `portraitUp`,\n   * `portraitDown`) correspond to the official UIKit documentation:\n   *\n   * @see {@link https://developer.apple.com/documentation/uikit/uiinterfaceorientationmask|UIInterfaceOrientationMask}\n   *\n   * @default inherit\n   *\n   * @platform ios\n   */\n  orientation?: BottomTabsScreenOrientation;\n  // #endregion General\n\n  // #region Android-only appearance\n  /**\n   * @summary Specifies the icon for the tab bar item.\n   *\n   * Accepts a string corresponding to the resource name. Initially searches within\n   * the app's drawable resources. If no matching resource is found, it defaults to\n   * searching within the Android's drawable resources.\n   *\n   * @platform android\n   */\n  iconResourceName?: string;\n  /**\n   * @summary Specifies the icon for the tab bar item.\n   *\n   * Accepts a path to the external image asset. As for now, it respects an image from local assets\n   * and passed by `source.uri` property.\n   *\n   * @platform android\n   */\n  iconResource?: ImageSourcePropType;\n  /**\n   * @summary Specifies the color of the text in the badge.\n   *\n   * @platform android\n   */\n  tabBarItemBadgeTextColor?: ColorValue;\n  /**\n   * @summary Specifies the background color of the badge.\n   *\n   * @platform android\n   */\n  tabBarItemBadgeBackgroundColor?: ColorValue;\n  // #endregion Android-only appearance\n\n  // #region iOS-only appearance\n  /**\n   * @summary Specifies the standard tab bar appearance.\n   *\n   * Allows to customize the appearance depending on the tab bar item layout (stacked,\n   * inline, compact inline) and state (normal, selected, focused, disabled).\n   *\n   * @platform ios\n   */\n  standardAppearance?: BottomTabsScreenAppearance;\n  /**\n   * @summary Specifies the tab bar appearace when edge of scrollable content aligns\n   * with the edge of the tab bar.\n   *\n   * Allows to customize the appearance depending on the tab bar item layout (stacked,\n   * inline, compact inline) and state (normal, selected, focused, disabled).\n   *\n   * If this property is `undefined`, UIKit uses `standardAppearance`, modified to\n   * have a transparent background.\n   *\n   * @platform ios\n   */\n  scrollEdgeAppearance?: BottomTabsScreenAppearance;\n  /**\n   * @summary Specifies the icon for the tab bar item.\n   *\n   * The following values are currently supported:\n   *\n   * - an object with `sfSymbolName` - will attempt to use SF\n   *   Symbol with given name,\n   * - an object with `imageSource` - will attempt to use image\n   *   from provided resource,\n   * - an object with `templateSource` - will attempt to use image\n   *   from provided resource as template (the color of the image will\n   *   depend on props related to icon color and tab bar item's state).\n   *\n   * If no `selectedIcon` is provided, it will also be used as `selectedIcon`.\n   *\n   * @platform ios\n   */\n  icon?: Icon;\n  /**\n   * @summary Specifies the icon for tab bar item when it is selected.\n   *\n   * Supports the same values as `icon` property.\n   *\n   * To use `selectedIcon`, `icon` must also be provided.\n   *\n   * @platform ios\n   */\n  selectedIcon?: Icon;\n  /**\n   * @summary System-provided tab bar item with predefined icon and title\n   *\n   * Uses Apple's built-in tab bar items (e.g., bookmarks, contacts, downloads) with\n   * standard iOS styling and localized titles. Custom `icon` or `selectedIcon`\n   * properties will override the system icon, but the system-defined title cannot\n   * be customized.\n   *\n   * @see {@link https://developer.apple.com/documentation/uikit/uitabbaritem/systemitem|UITabBarItem.SystemItem}\n   * @platform ios\n   */\n  systemItem?: BottomTabsSystemItem;\n  /**\n   * @summary Specifies which special effects (also known as microinteractions)\n   * are enabled for the tab screen.\n   *\n   * For repeated tab selection (selecting already focused tab bar item),\n   * there are 2 supported special effects:\n   * - `popToRoot` - when Stack is nested inside tab screen and repeated\n   *   selection is detected, the Stack will pop to root screen,\n   * - `scrollToTop` - when there is a ScrollView in first descendant\n   *   chain from tab screen and repeated selection is detected, ScrollView\n   *   will be scrolled to top.\n   *\n   * `popToRoot` has priority over `scrollToTop`.\n   *\n   * @default All special effects are enabled by default.\n   *\n   * @platform ios\n   */\n  specialEffects?: {\n    repeatedTabSelection?: {\n      popToRoot?: boolean;\n      scrollToTop?: boolean;\n    };\n  };\n  /**\n   * @summary Allows to control whether contents of a tab screen should be frozen or not. This overrides any default behavior.\n   *\n   * @default `undefined`\n   */\n  freezeContents?: boolean;\n  /**\n   * @summary Specifies if `contentInsetAdjustmentBehavior` of first ScrollView\n   * in first descendant chain from tab screen should be overridden back from `never`\n   * to `automatic`.\n   *\n   * By default, `react-native`'s ScrollView has `contentInsetAdjustmentBehavior`\n   * set to `never` instead of UIKit-default (which is `automatic`). This\n   * prevents ScrollViews from respecting navigation bar insets.\n   * When this prop is set to `true`, `automatic` behavior is reverted.\n   *\n   * @default true\n   *\n   * @platform ios\n   */\n  overrideScrollViewContentInsetAdjustmentBehavior?: boolean;\n  // #endregion iOS-only appearance\n\n  // #region Events\n  /**\n   * @summary A callback that gets invoked when the tab screen will appear.\n   * This is called as soon as the transition begins.\n   *\n   * @platform android, ios\n   */\n  onWillAppear?: BottomTabsScreenEventHandler<EmptyObject>;\n  /**\n   * @summary A callback that gets invoked when the tab screen did appear.\n   * This is called as soon as the transition ends.\n   *\n   * @platform android, ios\n   */\n  onDidAppear?: BottomTabsScreenEventHandler<EmptyObject>;\n  /**\n   * @summary A callback that gets invoked when the tab screen will disappear.\n   * This is called as soon as the transition begins.\n   *\n   * @platform android, ios\n   */\n  onWillDisappear?: BottomTabsScreenEventHandler<EmptyObject>;\n  /**\n   * @summary A callback that gets invoked when the tab screen did disappear.\n   * This is called as soon as the transition ends.\n   *\n   * @platform android, ios\n   */\n  onDidDisappear?: BottomTabsScreenEventHandler<EmptyObject>;\n  // #endregion Events\n}\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}