{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _NativeFrameRateLogger = _interopRequireDefault(require(\"./NativeFrameRateLogger\"));\nvar invariant = require('invariant');\nvar FrameRateLogger = {\n  setGlobalOptions: function setGlobalOptions(options) {\n    if (options.debug !== undefined) {\n      invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');\n    }\n    if (_NativeFrameRateLogger.default) {\n      var optionsClone = {\n        debug: !!options.debug,\n        reportStackTraces: !!options.reportStackTraces\n      };\n      _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);\n    }\n  },\n  setContext: function setContext(context) {\n    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.setContext(context);\n  },\n  beginScroll: function beginScroll() {\n    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.beginScroll();\n  },\n  endScroll: function endScroll() {\n    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.endScroll();\n  }\n};\nmodule.exports = FrameRateLogger;","map":{"version":3,"names":["_NativeFrameRateLogger","_interopRequireDefault","require","invariant","FrameRateLogger","setGlobalOptions","options","debug","undefined","NativeFrameRateLogger","optionsClone","reportStackTraces","setContext","context","beginScroll","endScroll","module","exports"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeFrameRateLogger from './NativeFrameRateLogger';\n\nconst invariant = require('invariant');\n\n/**\n * Flow API for native FrameRateLogger module. If the native module is not installed, function calls\n * are just no-ops.\n *\n * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a\n * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the\n * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the\n * native module gathers up all it's frame drop data and reports it via an analytics pipeline for\n * analysis.\n *\n * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a\n * bug, but the native module should be robust to that.\n *\n * In the future we may add support for tracking frame drops in other types of interactions beyond\n * scrolling.\n */\nconst FrameRateLogger = {\n  /**\n   * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces\n   * during UI thread stalls and upload them if the native module supports it.\n   */\n  setGlobalOptions: function (options: {\n    debug?: boolean,\n    reportStackTraces?: boolean,\n    ...\n  }) {\n    if (options.debug !== undefined) {\n      invariant(\n        NativeFrameRateLogger,\n        'Trying to debug FrameRateLogger without the native module!',\n      );\n    }\n    if (NativeFrameRateLogger) {\n      // Needs to clone the object first to avoid modifying the argument.\n      const optionsClone = {\n        debug: !!options.debug,\n        reportStackTraces: !!options.reportStackTraces,\n      };\n      NativeFrameRateLogger.setGlobalOptions(optionsClone);\n    }\n  },\n\n  /**\n   * Must call `setContext` before any events can be properly tracked, which is done automatically\n   * in `AppRegistry`, but navigation is also a common place to hook in.\n   */\n  setContext: function (context: string) {\n    NativeFrameRateLogger && NativeFrameRateLogger.setContext(context);\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  beginScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.beginScroll();\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  endScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.endScroll();\n  },\n};\n\nmodule.exports = FrameRateLogger;\n"],"mappings":";AAUA,IAAAA,sBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AAkBtC,IAAME,eAAe,GAAG;EAKtBC,gBAAgB,EAAE,SAAlBA,gBAAgBA,CAAYC,OAI3B,EAAE;IACD,IAAIA,OAAO,CAACC,KAAK,KAAKC,SAAS,EAAE;MAC/BL,SAAS,CACPM,8BAAqB,EACrB,4DACF,CAAC;IACH;IACA,IAAIA,8BAAqB,EAAE;MAEzB,IAAMC,YAAY,GAAG;QACnBH,KAAK,EAAE,CAAC,CAACD,OAAO,CAACC,KAAK;QACtBI,iBAAiB,EAAE,CAAC,CAACL,OAAO,CAACK;MAC/B,CAAC;MACDF,8BAAqB,CAACJ,gBAAgB,CAACK,YAAY,CAAC;IACtD;EACF,CAAC;EAMDE,UAAU,EAAE,SAAZA,UAAUA,CAAYC,OAAe,EAAE;IACrCJ,8BAAqB,IAAIA,8BAAqB,CAACG,UAAU,CAACC,OAAO,CAAC;EACpE,CAAC;EAMDC,WAAW,WAAXA,WAAWA,CAAA,EAAG;IACZL,8BAAqB,IAAIA,8BAAqB,CAACK,WAAW,CAAC,CAAC;EAC9D,CAAC;EAMDC,SAAS,WAATA,SAASA,CAAA,EAAG;IACVN,8BAAqB,IAAIA,8BAAqB,CAACM,SAAS,CAAC,CAAC;EAC5D;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGb,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}