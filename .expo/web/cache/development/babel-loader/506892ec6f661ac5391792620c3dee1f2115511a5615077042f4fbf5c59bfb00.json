{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _NativeBlobModule = _interopRequireDefault(require(\"./NativeBlobModule\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar Blob = require('./Blob');\nvar BlobRegistry = require('./BlobRegistry');\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nfunction createBlobCollector(blobId) {\n  if (global.__blobCollectorProvider == null) {\n    return null;\n  } else {\n    return global.__blobCollectorProvider(blobId);\n  }\n}\nvar BlobManager = function () {\n  function BlobManager() {\n    (0, _classCallCheck2.default)(this, BlobManager);\n  }\n  return (0, _createClass2.default)(BlobManager, null, [{\n    key: \"createFromParts\",\n    value: function createFromParts(parts, options) {\n      (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');\n      var blobId = uuidv4();\n      var items = parts.map(function (part) {\n        if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {\n          throw new Error(\"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\");\n        }\n        if (part instanceof Blob) {\n          return {\n            data: part.data,\n            type: 'blob'\n          };\n        } else {\n          return {\n            data: String(part),\n            type: 'string'\n          };\n        }\n      });\n      var size = items.reduce(function (acc, curr) {\n        if (curr.type === 'string') {\n          return acc + global.unescape(encodeURI(curr.data)).length;\n        } else {\n          return acc + curr.data.size;\n        }\n      }, 0);\n      _NativeBlobModule.default.createFromParts(items, blobId);\n      return BlobManager.createFromOptions({\n        blobId: blobId,\n        offset: 0,\n        size: size,\n        type: options ? options.type : '',\n        lastModified: options ? options.lastModified : Date.now()\n      });\n    }\n  }, {\n    key: \"createFromOptions\",\n    value: function createFromOptions(options) {\n      BlobRegistry.register(options.blobId);\n      return Object.assign(Object.create(Blob.prototype), {\n        data: options.__collector == null ? Object.assign({}, options, {\n          __collector: createBlobCollector(options.blobId)\n        }) : options\n      });\n    }\n  }, {\n    key: \"release\",\n    value: function release(blobId) {\n      (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');\n      BlobRegistry.unregister(blobId);\n      if (BlobRegistry.has(blobId)) {\n        return;\n      }\n      _NativeBlobModule.default.release(blobId);\n    }\n  }, {\n    key: \"addNetworkingHandler\",\n    value: function addNetworkingHandler() {\n      (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');\n      _NativeBlobModule.default.addNetworkingHandler();\n    }\n  }, {\n    key: \"addWebSocketHandler\",\n    value: function addWebSocketHandler(socketId) {\n      (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');\n      _NativeBlobModule.default.addWebSocketHandler(socketId);\n    }\n  }, {\n    key: \"removeWebSocketHandler\",\n    value: function removeWebSocketHandler(socketId) {\n      (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');\n      _NativeBlobModule.default.removeWebSocketHandler(socketId);\n    }\n  }, {\n    key: \"sendOverSocket\",\n    value: function sendOverSocket(blob, socketId) {\n      (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');\n      _NativeBlobModule.default.sendOverSocket(blob.data, socketId);\n    }\n  }]);\n}();\nBlobManager.isAvailable = !!_NativeBlobModule.default;\nmodule.exports = BlobManager;","map":{"version":3,"names":["_NativeBlobModule","_interopRequireDefault","require","_invariant","Blob","BlobRegistry","uuidv4","replace","c","r","Math","random","v","toString","createBlobCollector","blobId","global","__blobCollectorProvider","BlobManager","_classCallCheck2","default","_createClass2","key","value","createFromParts","parts","options","invariant","NativeBlobModule","items","map","part","ArrayBuffer","ArrayBufferView","Error","data","type","String","size","reduce","acc","curr","unescape","encodeURI","length","createFromOptions","offset","lastModified","Date","now","register","Object","assign","create","prototype","__collector","release","unregister","has","addNetworkingHandler","addWebSocketHandler","socketId","removeWebSocketHandler","sendOverSocket","blob","isAvailable","module","exports"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/react-native/Libraries/Blob/BlobManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {BlobCollector, BlobData, BlobOptions} from './BlobTypes';\n\nimport NativeBlobModule from './NativeBlobModule';\nimport invariant from 'invariant';\n\nconst Blob = require('./Blob');\nconst BlobRegistry = require('./BlobRegistry');\n\n/*eslint-disable no-bitwise */\n/*eslint-disable eqeqeq */\n\n/**\n * Based on the rfc4122-compliant solution posted at\n * http://stackoverflow.com/questions/105034\n */\nfunction uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n// **Temporary workaround**\n// TODO(#24654): Use turbomodules for the Blob module.\n// Blob collector is a jsi::HostObject that is used by native to know\n// when the a Blob instance is deallocated. This allows to free the\n// underlying native resources. This is a hack to workaround the fact\n// that the current bridge infra doesn't allow to track js objects\n// deallocation. Ideally the whole Blob object should be a jsi::HostObject.\nfunction createBlobCollector(blobId: string): BlobCollector | null {\n  if (global.__blobCollectorProvider == null) {\n    return null;\n  } else {\n    return global.__blobCollectorProvider(blobId);\n  }\n}\n\n/**\n * Module to manage blobs. Wrapper around the native blob module.\n */\nclass BlobManager {\n  /**\n   * If the native blob module is available.\n   */\n  static isAvailable: boolean = !!NativeBlobModule;\n\n  /**\n   * Create blob from existing array of blobs.\n   */\n  static createFromParts(\n    parts: Array<Blob | string>,\n    options?: BlobOptions,\n  ): Blob {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    const blobId = uuidv4();\n    const items = parts.map(part => {\n      if (\n        part instanceof ArrayBuffer ||\n        (global.ArrayBufferView && part instanceof global.ArrayBufferView)\n      ) {\n        throw new Error(\n          \"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\",\n        );\n      }\n      if (part instanceof Blob) {\n        return {\n          data: part.data,\n          type: 'blob',\n        };\n      } else {\n        return {\n          data: String(part),\n          type: 'string',\n        };\n      }\n    });\n    const size = items.reduce((acc, curr) => {\n      if (curr.type === 'string') {\n        return acc + global.unescape(encodeURI(curr.data)).length;\n      } else {\n        return acc + curr.data.size;\n      }\n    }, 0);\n\n    NativeBlobModule.createFromParts(items, blobId);\n\n    return BlobManager.createFromOptions({\n      blobId,\n      offset: 0,\n      size,\n      type: options ? options.type : '',\n      lastModified: options ? options.lastModified : Date.now(),\n    });\n  }\n\n  /**\n   * Create blob instance from blob data from native.\n   * Used internally by modules like XHR, WebSocket, etc.\n   */\n  static createFromOptions(options: BlobData): Blob {\n    BlobRegistry.register(options.blobId);\n    // $FlowFixMe[prop-missing]\n    return Object.assign(Object.create(Blob.prototype), {\n      data:\n        // Reuse the collector instance when creating from an existing blob.\n        // This will make sure that the underlying resource is only deallocated\n        // when all blobs that refer to it are deallocated.\n        options.__collector == null\n          ? {\n              ...options,\n              __collector: createBlobCollector(options.blobId),\n            }\n          : options,\n    });\n  }\n\n  /**\n   * Deallocate resources for a blob.\n   */\n  static release(blobId: string): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    BlobRegistry.unregister(blobId);\n    if (BlobRegistry.has(blobId)) {\n      return;\n    }\n    NativeBlobModule.release(blobId);\n  }\n\n  /**\n   * Inject the blob content handler in the networking module to support blob\n   * requests and responses.\n   */\n  static addNetworkingHandler(): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.addNetworkingHandler();\n  }\n\n  /**\n   * Indicate the websocket should return a blob for incoming binary\n   * messages.\n   */\n  static addWebSocketHandler(socketId: number): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.addWebSocketHandler(socketId);\n  }\n\n  /**\n   * Indicate the websocket should no longer return a blob for incoming\n   * binary messages.\n   */\n  static removeWebSocketHandler(socketId: number): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.removeWebSocketHandler(socketId);\n  }\n\n  /**\n   * Send a blob message to a websocket.\n   */\n  static sendOverSocket(blob: Blob, socketId: number): void {\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\n\n    NativeBlobModule.sendOverSocket(blob.data, socketId);\n  }\n}\n\nmodule.exports = BlobManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}