{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _NativeEventEmitter = _interopRequireDefault(require(\"../EventEmitter/NativeEventEmitter\"));\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\nvar _EventEmitter = _interopRequireDefault(require(\"../vendor/emitter/EventEmitter\"));\nvar _DebugEnvironment = require(\"./DebugEnvironment\");\nvar _NativeAppearance = _interopRequireDefault(require(\"./NativeAppearance\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar eventEmitter = new _EventEmitter.default();\nif (_NativeAppearance.default) {\n  var nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativeAppearance.default);\n  nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {\n    var colorScheme = newAppearance.colorScheme;\n    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\");\n    eventEmitter.emit('change', {\n      colorScheme: colorScheme\n    });\n  });\n}\nmodule.exports = {\n  getColorScheme: function getColorScheme() {\n    if (__DEV__) {\n      if (_DebugEnvironment.isAsyncDebugging) {\n        return 'light';\n      }\n    }\n    var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;\n    (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\");\n    return nativeColorScheme;\n  },\n  setColorScheme: function setColorScheme(colorScheme) {\n    var nativeColorScheme = colorScheme == null ? 'unspecified' : colorScheme;\n    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, \"Unrecognized color scheme. Did you mean 'dark', 'light' or null?\");\n    if (_NativeAppearance.default != null && _NativeAppearance.default.setColorScheme != null) {\n      _NativeAppearance.default.setColorScheme(nativeColorScheme);\n    }\n  },\n  addChangeListener: function addChangeListener(listener) {\n    return eventEmitter.addListener('change', listener);\n  }\n};","map":{"version":3,"names":["_NativeEventEmitter","_interopRequireDefault","require","_Platform","_EventEmitter","_DebugEnvironment","_NativeAppearance","_invariant","eventEmitter","EventEmitter","NativeAppearance","nativeEventEmitter","NativeEventEmitter","Platform","OS","addListener","newAppearance","colorScheme","invariant","emit","module","exports","getColorScheme","__DEV__","isAsyncDebugging","nativeColorScheme","setColorScheme","addChangeListener","listener"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/react-native/Libraries/Utilities/Appearance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport {isAsyncDebugging} from './DebugEnvironment';\nimport NativeAppearance, {\n  type AppearancePreferences,\n  type ColorSchemeName,\n} from './NativeAppearance';\nimport invariant from 'invariant';\n\ntype AppearanceListener = (preferences: AppearancePreferences) => void;\nconst eventEmitter = new EventEmitter<{\n  change: [AppearancePreferences],\n}>();\n\ntype NativeAppearanceEventDefinitions = {\n  appearanceChanged: [AppearancePreferences],\n};\n\nif (NativeAppearance) {\n  const nativeEventEmitter =\n    new NativeEventEmitter<NativeAppearanceEventDefinitions>(\n      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n      // If you want to use the native module on other platforms, please remove this condition and test its behavior\n      Platform.OS !== 'ios' ? null : NativeAppearance,\n    );\n  nativeEventEmitter.addListener(\n    'appearanceChanged',\n    (newAppearance: AppearancePreferences) => {\n      const {colorScheme} = newAppearance;\n      invariant(\n        colorScheme === 'dark' ||\n          colorScheme === 'light' ||\n          colorScheme == null,\n        \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n      );\n      eventEmitter.emit('change', {colorScheme});\n    },\n  );\n}\n\nmodule.exports = {\n  /**\n   * Note: Although color scheme is available immediately, it may change at any\n   * time. Any rendering logic or styles that depend on this should try to call\n   * this function on every render, rather than caching the value (for example,\n   * using inline styles rather than setting a value in a `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.getColorScheme();`\n   *\n   * @returns {?ColorSchemeName} Value for the color scheme preference.\n   */\n  getColorScheme(): ?ColorSchemeName {\n    if (__DEV__) {\n      if (isAsyncDebugging) {\n        // Hard code light theme when using the async debugger as\n        // sync calls aren't supported\n        return 'light';\n      }\n    }\n\n    // TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union\n    const nativeColorScheme: ?string =\n      NativeAppearance == null\n        ? null\n        : NativeAppearance.getColorScheme() || null;\n    invariant(\n      nativeColorScheme === 'dark' ||\n        nativeColorScheme === 'light' ||\n        nativeColorScheme == null,\n      \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n    );\n    return nativeColorScheme;\n  },\n\n  setColorScheme(colorScheme: ?ColorSchemeName): void {\n    const nativeColorScheme = colorScheme == null ? 'unspecified' : colorScheme;\n\n    invariant(\n      colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null,\n      \"Unrecognized color scheme. Did you mean 'dark', 'light' or null?\",\n    );\n\n    if (NativeAppearance != null && NativeAppearance.setColorScheme != null) {\n      NativeAppearance.setColorScheme(nativeColorScheme);\n    }\n  },\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  },\n};\n"],"mappings":";AAUA,IAAAA,mBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AAGA,IAAAG,iBAAA,GAAAH,OAAA;AACA,IAAAI,iBAAA,GAAAL,sBAAA,CAAAC,OAAA;AAIA,IAAAK,UAAA,GAAAN,sBAAA,CAAAC,OAAA;AAGA,IAAMM,YAAY,GAAG,IAAIC,qBAAY,CAElC,CAAC;AAMJ,IAAIC,yBAAgB,EAAE;EACpB,IAAMC,kBAAkB,GACtB,IAAIC,2BAAkB,CAGpBC,iBAAQ,CAACC,EAAE,KAAK,KAAK,GAAG,IAAI,GAAGJ,yBACjC,CAAC;EACHC,kBAAkB,CAACI,WAAW,CAC5B,mBAAmB,EACnB,UAACC,aAAoC,EAAK;IACxC,IAAOC,WAAW,GAAID,aAAa,CAA5BC,WAAW;IAClB,IAAAC,kBAAS,EACPD,WAAW,KAAK,MAAM,IACpBA,WAAW,KAAK,OAAO,IACvBA,WAAW,IAAI,IAAI,EACrB,4DACF,CAAC;IACDT,YAAY,CAACW,IAAI,CAAC,QAAQ,EAAE;MAACF,WAAW,EAAXA;IAAW,CAAC,CAAC;EAC5C,CACF,CAAC;AACH;AAEAG,MAAM,CAACC,OAAO,GAAG;EAWfC,cAAc,WAAdA,cAAcA,CAAA,EAAqB;IACjC,IAAIC,OAAO,EAAE;MACX,IAAIC,kCAAgB,EAAE;QAGpB,OAAO,OAAO;MAChB;IACF;IAGA,IAAMC,iBAA0B,GAC9Bf,yBAAgB,IAAI,IAAI,GACpB,IAAI,GACJA,yBAAgB,CAACY,cAAc,CAAC,CAAC,IAAI,IAAI;IAC/C,IAAAJ,kBAAS,EACPO,iBAAiB,KAAK,MAAM,IAC1BA,iBAAiB,KAAK,OAAO,IAC7BA,iBAAiB,IAAI,IAAI,EAC3B,4DACF,CAAC;IACD,OAAOA,iBAAiB;EAC1B,CAAC;EAEDC,cAAc,WAAdA,cAAcA,CAACT,WAA6B,EAAQ;IAClD,IAAMQ,iBAAiB,GAAGR,WAAW,IAAI,IAAI,GAAG,aAAa,GAAGA,WAAW;IAE3E,IAAAC,kBAAS,EACPD,WAAW,KAAK,MAAM,IAAIA,WAAW,KAAK,OAAO,IAAIA,WAAW,IAAI,IAAI,EACxE,kEACF,CAAC;IAED,IAAIP,yBAAgB,IAAI,IAAI,IAAIA,yBAAgB,CAACgB,cAAc,IAAI,IAAI,EAAE;MACvEhB,yBAAgB,CAACgB,cAAc,CAACD,iBAAiB,CAAC;IACpD;EACF,CAAC;EAKDE,iBAAiB,WAAjBA,iBAAiBA,CAACC,QAA4B,EAAqB;IACjE,OAAOpB,YAAY,CAACO,WAAW,CAAC,QAAQ,EAAEa,QAAQ,CAAC;EACrD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}