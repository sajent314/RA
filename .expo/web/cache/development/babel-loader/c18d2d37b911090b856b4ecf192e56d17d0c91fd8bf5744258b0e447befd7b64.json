{"ast":null,"code":"\"use strict\";\n\nconst EventEmitter = require(\"./vendor/eventemitter3\");\nconst inject = ({\n  module: [id, code],\n  sourceURL\n}) => {\n  if (global.globalEvalWithSourceUrl) {\n    global.globalEvalWithSourceUrl(code, sourceURL);\n  } else {\n    eval(code);\n  }\n};\nconst injectUpdate = update => {\n  update.added.forEach(inject);\n  update.modified.forEach(inject);\n};\nclass HMRClient extends EventEmitter {\n  _isEnabled = false;\n  _pendingUpdate = null;\n  _queue = [];\n  _state = \"opening\";\n  constructor(url) {\n    super();\n    this._ws = new global.WebSocket(url);\n    this._ws.onopen = () => {\n      this._state = \"open\";\n      this.emit(\"open\");\n      this._flushQueue();\n    };\n    this._ws.onerror = error => {\n      this.emit(\"connection-error\", error);\n    };\n    this._ws.onclose = closeEvent => {\n      this._state = \"closed\";\n      this.emit(\"close\", closeEvent);\n    };\n    this._ws.onmessage = message => {\n      const data = JSON.parse(String(message.data));\n      switch (data.type) {\n        case \"bundle-registered\":\n          this.emit(\"bundle-registered\");\n          break;\n        case \"update-start\":\n          this.emit(\"update-start\", data.body);\n          break;\n        case \"update\":\n          this.emit(\"update\", data.body);\n          break;\n        case \"update-done\":\n          this.emit(\"update-done\");\n          break;\n        case \"error\":\n          this.emit(\"error\", data.body);\n          break;\n        default:\n          this.emit(\"error\", {\n            type: \"unknown-message\",\n            message: data\n          });\n      }\n    };\n    this.on(\"update\", update => {\n      if (this._isEnabled) {\n        injectUpdate(update);\n      } else if (this._pendingUpdate == null) {\n        this._pendingUpdate = update;\n      } else {\n        this._pendingUpdate = mergeUpdates(this._pendingUpdate, update);\n      }\n    });\n  }\n  close() {\n    this._ws.close();\n  }\n  send(message) {\n    switch (this._state) {\n      case \"opening\":\n        this._queue.push(message);\n        break;\n      case \"open\":\n        this._ws.send(message);\n        break;\n      case \"closed\":\n        break;\n      default:\n        throw new Error(\"[WebSocketHMRClient] Unknown state: \" + this._state);\n    }\n  }\n  _flushQueue() {\n    this._queue.forEach(message => this.send(message));\n    this._queue.length = 0;\n  }\n  enable() {\n    this._isEnabled = true;\n    const update = this._pendingUpdate;\n    this._pendingUpdate = null;\n    if (update != null) {\n      injectUpdate(update);\n    }\n  }\n  disable() {\n    this._isEnabled = false;\n  }\n  isEnabled() {\n    return this._isEnabled;\n  }\n  hasPendingUpdates() {\n    return this._pendingUpdate != null;\n  }\n}\nfunction mergeUpdates(base, next) {\n  const addedIDs = new Set();\n  const deletedIDs = new Set();\n  const moduleMap = new Map();\n  applyUpdateLocally(base);\n  applyUpdateLocally(next);\n  function applyUpdateLocally(update) {\n    update.deleted.forEach(id => {\n      if (addedIDs.has(id)) {\n        addedIDs.delete(id);\n      } else {\n        deletedIDs.add(id);\n      }\n      moduleMap.delete(id);\n    });\n    update.added.forEach(item => {\n      const id = item.module[0];\n      if (deletedIDs.has(id)) {\n        deletedIDs.delete(id);\n      } else {\n        addedIDs.add(id);\n      }\n      moduleMap.set(id, item);\n    });\n    update.modified.forEach(item => {\n      const id = item.module[0];\n      moduleMap.set(id, item);\n    });\n  }\n  const result = {\n    isInitialUpdate: next.isInitialUpdate,\n    revisionId: next.revisionId,\n    added: [],\n    modified: [],\n    deleted: []\n  };\n  deletedIDs.forEach(id => {\n    result.deleted.push(id);\n  });\n  moduleMap.forEach((item, id) => {\n    if (deletedIDs.has(id)) {\n      return;\n    }\n    if (addedIDs.has(id)) {\n      result.added.push(item);\n    } else {\n      result.modified.push(item);\n    }\n  });\n  return result;\n}\nmodule.exports = HMRClient;","map":{"version":3,"names":["EventEmitter","require","inject","module","id","code","sourceURL","global","globalEvalWithSourceUrl","eval","injectUpdate","update","added","forEach","modified","HMRClient","_isEnabled","_pendingUpdate","_queue","_state","constructor","url","_ws","WebSocket","onopen","emit","_flushQueue","onerror","error","onclose","closeEvent","onmessage","message","data","JSON","parse","String","type","body","on","mergeUpdates","close","send","push","Error","length","enable","disable","isEnabled","hasPendingUpdates","base","next","addedIDs","Set","deletedIDs","moduleMap","Map","applyUpdateLocally","deleted","has","delete","add","item","set","result","isInitialUpdate","revisionId","exports"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/@expo/metro/node_modules/metro-runtime/src/modules/HMRClient.js"],"sourcesContent":["\"use strict\";\n\nconst EventEmitter = require(\"./vendor/eventemitter3\");\nconst inject = ({ module: [id, code], sourceURL }) => {\n  if (global.globalEvalWithSourceUrl) {\n    global.globalEvalWithSourceUrl(code, sourceURL);\n  } else {\n    eval(code);\n  }\n};\nconst injectUpdate = (update) => {\n  update.added.forEach(inject);\n  update.modified.forEach(inject);\n};\nclass HMRClient extends EventEmitter {\n  _isEnabled = false;\n  _pendingUpdate = null;\n  _queue = [];\n  _state = \"opening\";\n  constructor(url) {\n    super();\n    this._ws = new global.WebSocket(url);\n    this._ws.onopen = () => {\n      this._state = \"open\";\n      this.emit(\"open\");\n      this._flushQueue();\n    };\n    this._ws.onerror = (error) => {\n      this.emit(\"connection-error\", error);\n    };\n    this._ws.onclose = (closeEvent) => {\n      this._state = \"closed\";\n      this.emit(\"close\", closeEvent);\n    };\n    this._ws.onmessage = (message) => {\n      const data = JSON.parse(String(message.data));\n      switch (data.type) {\n        case \"bundle-registered\":\n          this.emit(\"bundle-registered\");\n          break;\n        case \"update-start\":\n          this.emit(\"update-start\", data.body);\n          break;\n        case \"update\":\n          this.emit(\"update\", data.body);\n          break;\n        case \"update-done\":\n          this.emit(\"update-done\");\n          break;\n        case \"error\":\n          this.emit(\"error\", data.body);\n          break;\n        default:\n          this.emit(\"error\", {\n            type: \"unknown-message\",\n            message: data,\n          });\n      }\n    };\n    this.on(\"update\", (update) => {\n      if (this._isEnabled) {\n        injectUpdate(update);\n      } else if (this._pendingUpdate == null) {\n        this._pendingUpdate = update;\n      } else {\n        this._pendingUpdate = mergeUpdates(this._pendingUpdate, update);\n      }\n    });\n  }\n  close() {\n    this._ws.close();\n  }\n  send(message) {\n    switch (this._state) {\n      case \"opening\":\n        this._queue.push(message);\n        break;\n      case \"open\":\n        this._ws.send(message);\n        break;\n      case \"closed\":\n        break;\n      default:\n        throw new Error(\"[WebSocketHMRClient] Unknown state: \" + this._state);\n    }\n  }\n  _flushQueue() {\n    this._queue.forEach((message) => this.send(message));\n    this._queue.length = 0;\n  }\n  enable() {\n    this._isEnabled = true;\n    const update = this._pendingUpdate;\n    this._pendingUpdate = null;\n    if (update != null) {\n      injectUpdate(update);\n    }\n  }\n  disable() {\n    this._isEnabled = false;\n  }\n  isEnabled() {\n    return this._isEnabled;\n  }\n  hasPendingUpdates() {\n    return this._pendingUpdate != null;\n  }\n}\nfunction mergeUpdates(base, next) {\n  const addedIDs = new Set();\n  const deletedIDs = new Set();\n  const moduleMap = new Map();\n  applyUpdateLocally(base);\n  applyUpdateLocally(next);\n  function applyUpdateLocally(update) {\n    update.deleted.forEach((id) => {\n      if (addedIDs.has(id)) {\n        addedIDs.delete(id);\n      } else {\n        deletedIDs.add(id);\n      }\n      moduleMap.delete(id);\n    });\n    update.added.forEach((item) => {\n      const id = item.module[0];\n      if (deletedIDs.has(id)) {\n        deletedIDs.delete(id);\n      } else {\n        addedIDs.add(id);\n      }\n      moduleMap.set(id, item);\n    });\n    update.modified.forEach((item) => {\n      const id = item.module[0];\n      moduleMap.set(id, item);\n    });\n  }\n  const result = {\n    isInitialUpdate: next.isInitialUpdate,\n    revisionId: next.revisionId,\n    added: [],\n    modified: [],\n    deleted: [],\n  };\n  deletedIDs.forEach((id) => {\n    result.deleted.push(id);\n  });\n  moduleMap.forEach((item, id) => {\n    if (deletedIDs.has(id)) {\n      return;\n    }\n    if (addedIDs.has(id)) {\n      result.added.push(item);\n    } else {\n      result.modified.push(item);\n    }\n  });\n  return result;\n}\nmodule.exports = HMRClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}