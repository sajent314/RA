{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseComponentStack = parseComponentStack;\nexports.parseInterpolation = parseInterpolation;\nexports.parseLogBoxException = parseLogBoxException;\nexports.parseLogBoxLog = parseLogBoxLog;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _parseErrorStack = _interopRequireDefault(require(\"../../Core/Devtools/parseErrorStack\"));\nvar _UTFSequence = _interopRequireDefault(require(\"../../UTFSequence\"));\nvar _stringifySafe = _interopRequireDefault(require(\"../../Utilities/stringifySafe\"));\nvar _ansiRegex = _interopRequireDefault(require(\"ansi-regex\"));\nvar ANSI_REGEX = (0, _ansiRegex.default)().source;\nvar BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nvar BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(['^', `(?:${ANSI_REGEX})*`, '>', `(?:${ANSI_REGEX})*`, ' +', '[0-9]+', ' \\\\|'].join(''), 'm');\nvar BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*):? (?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)(\\/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])+?)\\n([ >]{2}[\\t-\\r 0-9\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+ \\|(?:[\\0-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])+|\\x1B(?:[\\0-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])+)/;\nvar METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*): ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*) \\(([0-9]+):([0-9]+)\\)\\n\\n((?:[\\0-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])+)/;\nvar SUBSTITUTION = _UTFSequence.default.BOM + '%s';\nfunction parseInterpolation(args) {\n  var categoryParts = [];\n  var contentParts = [];\n  var substitutionOffsets = [];\n  var remaining = (0, _toConsumableArray2.default)(args);\n  if (typeof remaining[0] === 'string') {\n    var formatString = String(remaining.shift());\n    var formatStringParts = formatString.split('%s');\n    var substitutionCount = formatStringParts.length - 1;\n    var substitutions = remaining.splice(0, substitutionCount);\n    var categoryString = '';\n    var contentString = '';\n    var substitutionIndex = 0;\n    for (var formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : (0, _stringifySafe.default)(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length\n          });\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length\n          });\n          categoryString += '%s';\n          contentString += '%s';\n        }\n        substitutionIndex++;\n      }\n    }\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n  var remainingArgs = remaining.map(function (arg) {\n    return typeof arg === 'string' ? arg : (0, _stringifySafe.default)(arg);\n  });\n  categoryParts.push.apply(categoryParts, (0, _toConsumableArray2.default)(remainingArgs));\n  contentParts.push.apply(contentParts, (0, _toConsumableArray2.default)(remainingArgs));\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets\n    }\n  };\n}\nfunction isComponentStack(consoleArgument) {\n  var isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  var isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  var isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n  return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;\n}\nfunction parseComponentStack(message) {\n  var stack = (0, _parseErrorStack.default)(message);\n  if (stack && stack.length > 0) {\n    return stack.map(function (frame) {\n      return {\n        content: frame.methodName,\n        collapse: frame.collapse || false,\n        fileName: frame.file == null ? 'unknown' : frame.file,\n        location: {\n          column: frame.column == null ? -1 : frame.column,\n          row: frame.lineNumber == null ? -1 : frame.lineNumber\n        }\n      };\n    });\n  }\n  return message.split(/\\n {4}in /g).map(function (s) {\n    if (!s) {\n      return null;\n    }\n    var match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n    if (!match) {\n      return null;\n    }\n    var _match$slice = match.slice(1),\n      _match$slice2 = (0, _slicedToArray2.default)(_match$slice, 3),\n      content = _match$slice2[0],\n      fileName = _match$slice2[1],\n      row = _match$slice2[2];\n    return {\n      content: content,\n      fileName: fileName,\n      location: {\n        column: -1,\n        row: parseInt(row, 10)\n      }\n    };\n  }).filter(Boolean);\n}\nfunction parseLogBoxException(error) {\n  var message = error.originalMessage != null ? error.originalMessage : 'Unknown';\n  var metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    var _metroInternalError$s = metroInternalError.slice(1),\n      _metroInternalError$s2 = (0, _slicedToArray2.default)(_metroInternalError$s, 5),\n      content = _metroInternalError$s2[0],\n      fileName = _metroInternalError$s2[1],\n      row = _metroInternalError$s2[2],\n      column = _metroInternalError$s2[3],\n      codeFrame = _metroInternalError$s2[4];\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content: content,\n        substitutions: []\n      },\n      category: `${fileName}-${row}-${column}`\n    };\n  }\n  var babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    var _babelTransformError$ = babelTransformError.slice(1),\n      _babelTransformError$2 = (0, _slicedToArray2.default)(_babelTransformError$, 5),\n      _fileName = _babelTransformError$2[0],\n      _content = _babelTransformError$2[1],\n      _row = _babelTransformError$2[2],\n      _column = _babelTransformError$2[3],\n      _codeFrame = _babelTransformError$2[4];\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName: _fileName,\n        location: {\n          row: parseInt(_row, 10),\n          column: parseInt(_column, 10)\n        },\n        content: _codeFrame\n      },\n      message: {\n        content: _content,\n        substitutions: []\n      },\n      category: `${_fileName}-${_row}-${_column}`\n    };\n  }\n  if (BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {\n    var babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n    if (babelCodeFrameError) {\n      var _babelCodeFrameError$ = babelCodeFrameError.slice(1),\n        _babelCodeFrameError$2 = (0, _slicedToArray2.default)(_babelCodeFrameError$, 3),\n        _fileName2 = _babelCodeFrameError$2[0],\n        _content2 = _babelCodeFrameError$2[1],\n        _codeFrame2 = _babelCodeFrameError$2[2];\n      return {\n        level: 'syntax',\n        stack: [],\n        isComponentError: false,\n        componentStack: [],\n        codeFrame: {\n          fileName: _fileName2,\n          location: null,\n          content: _codeFrame2\n        },\n        message: {\n          content: _content2,\n          substitutions: []\n        },\n        category: `${_fileName2}-${1}-${1}`\n      };\n    }\n  }\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: []\n      },\n      category: message\n    };\n  }\n  var componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return Object.assign({\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: componentStack != null ? parseComponentStack(componentStack) : []\n    }, parseInterpolation([message]));\n  }\n  if (componentStack != null) {\n    return Object.assign({\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack)\n    }, parseInterpolation([message]));\n  }\n  return Object.assign({\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError\n  }, parseLogBoxLog([message]));\n}\nfunction parseLogBoxLog(args) {\n  var message = args[0];\n  var argsWithoutComponentStack = [];\n  var componentStack = [];\n  if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {\n    var lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n  if (componentStack.length === 0) {\n    for (var arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        var messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n  return Object.assign({}, parseInterpolation(argsWithoutComponentStack), {\n    componentStack: componentStack\n  });\n}","map":{"version":3,"names":["_parseErrorStack","_interopRequireDefault","require","_UTFSequence","_stringifySafe","_ansiRegex","ANSI_REGEX","ansiRegex","source","BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_MARKER_PATTERN","RegExp","join","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","UTFSequence","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","_toConsumableArray2","default","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","stringifySafe","push","offset","remainingArgs","map","arg","apply","category","message","content","isComponentStack","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","parseErrorStack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","_match$slice","slice","_match$slice2","_slicedToArray2","parseInt","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","_metroInternalError$s","_metroInternalError$s2","codeFrame","level","type","isComponentError","componentStack","babelTransformError","_babelTransformError$","_babelTransformError$2","babelCodeFrameError","_babelCodeFrameError$","_babelCodeFrameError$2","isFatal","Object","assign","parseLogBoxLog","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/react-native/Libraries/LogBox/Data/parseLogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {ExceptionData} from '../../Core/NativeExceptionsManager';\nimport type {LogBoxLogData} from './LogBoxLog';\n\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\nimport ansiRegex from 'ansi-regex';\n\nconst ANSI_REGEX = ansiRegex().source;\n\nconst BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\n\n// https://github.com/babel/babel/blob/33dbb85e9e9fe36915273080ecc42aee62ed0ade/packages/babel-code-frame/src/index.ts#L183-L184\nconst BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(\n  [\n    // Beginning of a line (per 'm' flag)\n    '^',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Marker\n    '>',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Left padding for line number\n    ' +',\n    // Line number\n    '[0-9]+',\n    // Gutter\n    ' \\\\|',\n  ].join(''),\n  'm',\n);\n\nconst BABEL_CODE_FRAME_ERROR_FORMAT =\n  // eslint-disable-next-line no-control-regex\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\n\nconst METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean,\n  ...\n};\nexport type Category = string;\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean,\n|}>;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nexport type ComponentStack = $ReadOnlyArray<CodeFrame>;\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nexport function parseInterpolation(args: $ReadOnlyArray<mixed>): $ReadOnly<{|\n  category: Category,\n  message: Message,\n|}> {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = '';\n    let contentString = '';\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === 'string'\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += '%s';\n          contentString += '%s';\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map(arg => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(frame => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? 'unknown' : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map(s => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.js):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      let [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: {column: -1, row: parseInt(row, 10)},\n      };\n    })\n    .filter(Boolean);\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData,\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : 'Unknown';\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n    };\n  }\n\n  // Perform a cheap match first before trying to parse the full message, which\n  // can get expensive for arbitrary input.\n  if (BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {\n    const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n    if (babelCodeFrameError) {\n      // Codeframe errors are thrown from any use of buildCodeFrameError.\n      const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n      return {\n        level: 'syntax',\n        stack: [],\n        isComponentError: false,\n        componentStack: [],\n        codeFrame: {\n          fileName,\n          location: null, // We are not given the location.\n          content: codeFrame,\n        },\n        message: {\n          content,\n          substitutions: [],\n        },\n        category: `${fileName}-${1}-${1}`,\n      };\n    }\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack buried in the message.\n  return {\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(args: $ReadOnlyArray<mixed>): {|\n  componentStack: ComponentStack,\n  category: Category,\n  message: Message,\n|} {\n  const message = args[0];\n  let argsWithoutComponentStack: Array<mixed> = [];\n  let componentStack: ComponentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === 'string' &&\n    message.slice(-2) === '%s' &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}