{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/expo-modules-core/src/ts-declarations/EventEmitter.ts"],"sourcesContent":["/**\n * Base type of the events map, whose keys represent supported event names\n * and values are the signatures of the listener for that specific event.\n */\nexport type EventsMap = Record<string, (...args: any[]) => void>;\n\n/**\n * A subscription object that allows to conveniently remove an event listener from the emitter.\n */\nexport type EventSubscription = {\n  /**\n   * Removes an event listener for which the subscription has been created.\n   * After calling this function, the listener will no longer receive any events from the emitter.\n   */\n  remove(): void;\n};\n\n/**\n * A class that provides a consistent API for emitting and listening to events.\n * It shares many concepts with other emitter APIs, such as Node's EventEmitter and `fbemitter`.\n * When the event is emitted, all of the functions attached to that specific event are called *synchronously*.\n * Any values returned by the called listeners are *ignored* and discarded.\n * Its implementation is written in C++ and common for all the platforms.\n */\nexport declare class EventEmitter<TEventsMap extends EventsMap = Record<never, never>> {\n  /**\n   * A dummy private property with the given generic type. It is required for TypeScript to correctly infer this subtype.\n   * E.g. `useEvent` would not be able to infer the events map which results in accepting any string as the event name.\n   * @private\n   * @deprecated\n   */\n  _TEventsMap_DONT_USE_IT?: TEventsMap;\n\n  /**\n   * Creates a new event emitter instance.\n   */\n  constructor();\n\n  /**\n   * @deprecated As of Expo SDK 52 the given object is already an EventEmitter.\n   * Creating a new one is not necessary.\n   * @hidden\n   */\n  constructor(object: EventEmitter);\n\n  /**\n   * Adds a listener for the given event name.\n   */\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription;\n\n  /**\n   * Removes a listener for the given event name.\n   */\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void;\n\n  /**\n   * Removes all listeners for the given event name.\n   */\n  removeAllListeners(eventName: keyof TEventsMap): void;\n\n  /**\n   * Synchronously calls all the listeners attached to that specific event.\n   * The event can include any number of arguments that will be passed to the listeners.\n   */\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void;\n\n  /**\n   * Returns a number of listeners added to the given event.\n   */\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number;\n\n  /**\n   * Function that is automatically invoked when the first listener for an event with the given name is added.\n   * Override it in a subclass to perform some additional setup once the event started being observed.\n   */\n  startObserving?<EventName extends keyof TEventsMap>(eventName: EventName): void;\n\n  /**\n   * Function that is automatically invoked when the last listener for an event with the given name is removed.\n   * Override it in a subclass to perform some additional cleanup once the event is no longer observed.\n   */\n  stopObserving?<EventName extends keyof TEventsMap>(eventName: EventName): void;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}