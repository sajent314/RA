{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _NativeUIManager = _interopRequireDefault(require(\"./NativeUIManager\"));\nvar NativeModules = require('../BatchedBridge/NativeModules');\nvar defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\nvar Platform = require('../Utilities/Platform');\nvar UIManagerProperties = require('./UIManagerProperties');\nvar viewManagerConfigs = {};\nvar triedLoadingConfig = new Set();\nvar NativeUIManagerConstants = {};\nvar isNativeUIManagerConstantsSet = false;\nfunction _getConstants() {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = _NativeUIManager.default.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\nfunction _getViewManagerConfig(viewManagerName) {\n  if (viewManagerConfigs[viewManagerName] === undefined && global.nativeCallSyncHook && _NativeUIManager.default.getConstantsForViewManager) {\n    try {\n      viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\"NativeUIManager.getConstantsForViewManager('\" + viewManagerName + \"') threw an exception.\", e);\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n  var config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n  if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {\n    var result = _NativeUIManager.default.lazilyLoadView(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      _getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n  return viewManagerConfigs[viewManagerName];\n}\nvar UIManagerJS = Object.assign({}, _NativeUIManager.default, {\n  createView: function createView(reactTag, viewName, rootTag, props) {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      _getViewManagerConfig(viewName);\n    }\n    _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants: function getConstants() {\n    return _getConstants();\n  },\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig: function hasViewManagerConfig(viewManagerName) {\n    return _getViewManagerConfig(viewManagerName) != null;\n  }\n});\n_NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\nfunction lazifyViewManagerConfig(viewName) {\n  var viewConfig = _getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var constants = {};\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value !== 'function') {\n            constants[key] = value;\n          }\n        });\n        return constants;\n      }\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: function get() {\n        var viewManager = NativeModules[viewConfig.Manager];\n        var commands = {};\n        var index = 0;\n        viewManager && Object.keys(viewManager).forEach(function (key) {\n          var value = viewManager[key];\n          if (typeof value === 'function') {\n            commands[key] = index++;\n          }\n        });\n        return commands;\n      }\n    });\n  }\n}\nif (Platform.OS === 'ios') {\n  Object.keys(_getConstants()).forEach(function (viewName) {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (_getConstants().ViewManagerNames) {\n  _NativeUIManager.default.getConstants().ViewManagerNames.forEach(function (viewManagerName) {\n    defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {\n      get: function get() {\n        return _NativeUIManager.default.getConstantsForViewManager(viewManagerName);\n      }\n    });\n  });\n}\nif (!global.nativeCallSyncHook) {\n  Object.keys(_getConstants()).forEach(function (viewManagerName) {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = _getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {\n        get: function get() {\n          console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        }\n      });\n    }\n  });\n}\nmodule.exports = UIManagerJS;","map":{"version":3,"names":["_NativeUIManager","_interopRequireDefault","require","NativeModules","defineLazyObjectProperty","Platform","UIManagerProperties","viewManagerConfigs","triedLoadingConfig","Set","NativeUIManagerConstants","isNativeUIManagerConstantsSet","getConstants","NativeUIManager","getViewManagerConfig","viewManagerName","undefined","global","nativeCallSyncHook","getConstantsForViewManager","e","console","error","config","lazilyLoadView","has","result","add","viewConfig","lazifyViewManagerConfig","UIManagerJS","Object","assign","createView","reactTag","viewName","rootTag","props","OS","hasViewManagerConfig","Manager","get","viewManager","constants","keys","forEach","key","value","commands","index","ViewManagerNames","includes","warn","module","exports"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/react-native/Libraries/ReactNative/PaperUIManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {RootTag} from '../Types/RootTagTypes';\n\nimport NativeUIManager from './NativeUIManager';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\nconst Platform = require('../Utilities/Platform');\nconst UIManagerProperties = require('./UIManagerProperties');\n\nconst viewManagerConfigs: {[string]: any | null} = {};\n\nconst triedLoadingConfig = new Set<string>();\n\nlet NativeUIManagerConstants = {};\nlet isNativeUIManagerConstantsSet = false;\nfunction getConstants(): Object {\n  if (!isNativeUIManagerConstantsSet) {\n    NativeUIManagerConstants = NativeUIManager.getConstants();\n    isNativeUIManagerConstantsSet = true;\n  }\n  return NativeUIManagerConstants;\n}\n\nfunction getViewManagerConfig(viewManagerName: string): any {\n  if (\n    viewManagerConfigs[viewManagerName] === undefined &&\n    global.nativeCallSyncHook && // If we're in the Chrome Debugger, let's not even try calling the sync method\n    NativeUIManager.getConstantsForViewManager\n  ) {\n    try {\n      viewManagerConfigs[viewManagerName] =\n        NativeUIManager.getConstantsForViewManager(viewManagerName);\n    } catch (e) {\n      console.error(\n        \"NativeUIManager.getConstantsForViewManager('\" +\n          viewManagerName +\n          \"') threw an exception.\",\n        e,\n      );\n      viewManagerConfigs[viewManagerName] = null;\n    }\n  }\n\n  const config = viewManagerConfigs[viewManagerName];\n  if (config) {\n    return config;\n  }\n\n  // If we're in the Chrome Debugger, let's not even try calling the sync\n  // method.\n  if (!global.nativeCallSyncHook) {\n    return config;\n  }\n\n  if (\n    NativeUIManager.lazilyLoadView &&\n    !triedLoadingConfig.has(viewManagerName)\n  ) {\n    const result = NativeUIManager.lazilyLoadView(viewManagerName);\n    triedLoadingConfig.add(viewManagerName);\n    if (result != null && result.viewConfig != null) {\n      getConstants()[viewManagerName] = result.viewConfig;\n      lazifyViewManagerConfig(viewManagerName);\n    }\n  }\n\n  return viewManagerConfigs[viewManagerName];\n}\n\n/* $FlowFixMe[cannot-spread-interface] (>=0.123.0 site=react_native_fb) This\n * comment suppresses an error found when Flow v0.123.0 was deployed. To see\n * the error, delete this comment and run Flow. */\nconst UIManagerJS = {\n  ...NativeUIManager,\n  createView(\n    reactTag: ?number,\n    viewName: string,\n    rootTag: RootTag,\n    props: Object,\n  ): void {\n    if (Platform.OS === 'ios' && viewManagerConfigs[viewName] === undefined) {\n      // This is necessary to force the initialization of native viewManager\n      // classes in iOS when using static ViewConfigs\n      getViewManagerConfig(viewName);\n    }\n\n    NativeUIManager.createView(reactTag, viewName, rootTag, props);\n  },\n  getConstants(): Object {\n    return getConstants();\n  },\n  getViewManagerConfig(viewManagerName: string): any {\n    return getViewManagerConfig(viewManagerName);\n  },\n  hasViewManagerConfig(viewManagerName: string): boolean {\n    return getViewManagerConfig(viewManagerName) != null;\n  },\n};\n\n// TODO (T45220498): Remove this.\n// 3rd party libs may be calling `NativeModules.UIManager.getViewManagerConfig()`\n// instead of `UIManager.getViewManagerConfig()` off UIManager.js.\n// This is a workaround for now.\n// $FlowFixMe[prop-missing]\nNativeUIManager.getViewManagerConfig = UIManagerJS.getViewManagerConfig;\n\nfunction lazifyViewManagerConfig(viewName: string) {\n  const viewConfig = getConstants()[viewName];\n  viewManagerConfigs[viewName] = viewConfig;\n  if (viewConfig.Manager) {\n    defineLazyObjectProperty(viewConfig, 'Constants', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const constants: {[string]: mixed} = {};\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n        return constants;\n      },\n    });\n    defineLazyObjectProperty(viewConfig, 'Commands', {\n      get: () => {\n        const viewManager = NativeModules[viewConfig.Manager];\n        const commands: {[string]: number} = {};\n        let index = 0;\n        viewManager &&\n          Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n        return commands;\n      },\n    });\n  }\n}\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(getConstants()).forEach(viewName => {\n    lazifyViewManagerConfig(viewName);\n  });\n} else if (getConstants().ViewManagerNames) {\n  NativeUIManager.getConstants().ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n      get: () => NativeUIManager.getConstantsForViewManager(viewManagerName),\n    });\n  });\n}\n\nif (!global.nativeCallSyncHook) {\n  Object.keys(getConstants()).forEach(viewManagerName => {\n    if (!UIManagerProperties.includes(viewManagerName)) {\n      if (!viewManagerConfigs[viewManagerName]) {\n        viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];\n      }\n      defineLazyObjectProperty(NativeUIManager, viewManagerName, {\n        get: () => {\n          console.warn(\n            `Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` +\n              `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`,\n          );\n\n          return UIManagerJS.getViewManagerConfig(viewManagerName);\n        },\n      });\n    }\n  });\n}\n\nmodule.exports = UIManagerJS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}