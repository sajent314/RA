{"ast":null,"code":"import * as Location from 'expo-location';\nimport * as TaskManager from 'expo-task-manager';\nimport { incrementAtScore } from './ActivityTracker';\nimport { supabase } from './supabase';\nconst LOCATION_TASK_NAME = 'background-location-task';\nlet lastLocation = null;\nconst calculateDistance = (loc1, loc2) => {\n  const toRad = value => value * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(loc2.coords.latitude - loc1.coords.latitude);\n  const dLon = toRad(loc2.coords.longitude - loc1.coords.longitude);\n  const lat1 = toRad(loc1.coords.latitude);\n  const lat2 = toRad(loc2.coords.latitude);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nTaskManager.defineTask(LOCATION_TASK_NAME, async ({\n  data,\n  error\n}) => {\n  if (error) {\n    console.error(error);\n    return;\n  }\n  if (data) {\n    const {\n      locations\n    } = data;\n    const {\n      data: {\n        session\n      }\n    } = await supabase.auth.getSession();\n    if (session?.user && locations.length > 0) {\n      const newLocation = locations[0];\n      if (lastLocation) {\n        const distance = calculateDistance(lastLocation, newLocation);\n        if (distance > 0.01) {\n          await incrementAtScore(session.user.id, distance);\n        }\n      }\n      lastLocation = newLocation;\n    }\n  }\n});\nexport const startLocationTracking = async () => {\n  const {\n    status: foregroundStatus\n  } = await Location.requestForegroundPermissionsAsync();\n  if (foregroundStatus !== 'granted') {\n    console.error('Foreground location permission not granted');\n    return;\n  }\n  const {\n    status: backgroundStatus\n  } = await Location.requestBackgroundPermissionsAsync();\n  if (backgroundStatus !== 'granted') {\n    console.error('Background location permission not granted');\n    return;\n  }\n  await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\n    accuracy: Location.Accuracy.Balanced,\n    timeInterval: 60000,\n    distanceInterval: 10\n  });\n};","map":{"version":3,"names":["Location","TaskManager","incrementAtScore","supabase","LOCATION_TASK_NAME","lastLocation","calculateDistance","loc1","loc2","toRad","value","Math","PI","R","dLat","coords","latitude","dLon","longitude","lat1","lat2","a","sin","cos","c","atan2","sqrt","defineTask","data","error","console","locations","session","auth","getSession","user","length","newLocation","distance","id","startLocationTracking","status","foregroundStatus","requestForegroundPermissionsAsync","backgroundStatus","requestBackgroundPermissionsAsync","startLocationUpdatesAsync","accuracy","Accuracy","Balanced","timeInterval","distanceInterval"],"sources":["C:/Users/stjones/Desktop/Ra_App/src/lib/LocationTracker.ts"],"sourcesContent":["import * as Location from 'expo-location';\r\nimport * as TaskManager from 'expo-task-manager';\r\nimport { incrementAtScore } from './ActivityTracker';\r\nimport { supabase } from './supabase';\r\n\r\nconst LOCATION_TASK_NAME = 'background-location-task';\r\n\r\nlet lastLocation: Location.LocationObject | null = null;\r\n\r\nconst calculateDistance = (loc1: Location.LocationObject, loc2: Location.LocationObject) => {\r\n  const toRad = (value: number) => (value * Math.PI) / 180;\r\n  const R = 6371; // Earth's radius in km\r\n  const dLat = toRad(loc2.coords.latitude - loc1.coords.latitude);\r\n  const dLon = toRad(loc2.coords.longitude - loc1.coords.longitude);\r\n  const lat1 = toRad(loc1.coords.latitude);\r\n  const lat2 = toRad(loc2.coords.latitude);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c;\r\n};\r\n\r\nTaskManager.defineTask(LOCATION_TASK_NAME, async ({ data, error }: TaskManager.TaskManagerTaskBody) => {\r\n  if (error) {\r\n    console.error(error);\r\n    return;\r\n  }\r\n  if (data) {\r\n    const { locations } = data as { locations: Location.LocationObject[] };\r\n    const { data: { session } } = await supabase.auth.getSession();\r\n\r\n    if (session?.user && locations.length > 0) {\r\n      const newLocation = locations[0];\r\n      if (lastLocation) {\r\n        const distance = calculateDistance(lastLocation, newLocation);\r\n        if (distance > 0.01) { // Only update if moved at least 10 meters\r\n          await incrementAtScore(session.user.id, distance);\r\n        }\r\n      }\r\n      lastLocation = newLocation;\r\n    }\r\n  }\r\n});\r\n\r\nexport const startLocationTracking = async () => {\r\n  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\r\n  if (foregroundStatus !== 'granted') {\r\n    console.error('Foreground location permission not granted');\r\n    return;\r\n  }\r\n\r\n  const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();\r\n  if (backgroundStatus !== 'granted') {\r\n    console.error('Background location permission not granted');\r\n    return;\r\n  }\r\n\r\n  await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {\r\n    accuracy: Location.Accuracy.Balanced,\r\n    timeInterval: 60000, // 1 minute\r\n    distanceInterval: 10, // 10 meters\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}