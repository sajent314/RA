{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar ChildListCollection = exports.default = function () {\n  function ChildListCollection() {\n    (0, _classCallCheck2.default)(this, ChildListCollection);\n    this._cellKeyToChildren = new Map();\n    this._childrenToCellKey = new Map();\n  }\n  return (0, _createClass2.default)(ChildListCollection, [{\n    key: \"add\",\n    value: function add(list, cellKey) {\n      var _this$_cellKeyToChild;\n      (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild : new Set();\n      cellLists.add(list);\n      this._cellKeyToChildren.set(cellKey, cellLists);\n      this._childrenToCellKey.set(list, cellKey);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(list) {\n      var cellKey = this._childrenToCellKey.get(list);\n      (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n      this._childrenToCellKey.delete(list);\n      var cellLists = this._cellKeyToChildren.get(cellKey);\n      (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n      cellLists.delete(list);\n      if (cellLists.size === 0) {\n        this._cellKeyToChildren.delete(cellKey);\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      for (var listSet of this._cellKeyToChildren.values()) {\n        for (var list of listSet) {\n          fn(list);\n        }\n      }\n    }\n  }, {\n    key: \"forEachInCell\",\n    value: function forEachInCell(cellKey, fn) {\n      var _this$_cellKeyToChild2;\n      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild2 : [];\n      for (var list of listSet) {\n        fn(list);\n      }\n    }\n  }, {\n    key: \"anyInCell\",\n    value: function anyInCell(cellKey, fn) {\n      var _this$_cellKeyToChild3;\n      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild3 : [];\n      for (var list of listSet) {\n        if (fn(list)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this._childrenToCellKey.size;\n    }\n  }]);\n}();","map":{"version":3,"names":["_invariant","_interopRequireDefault","require","ChildListCollection","exports","default","_classCallCheck2","_cellKeyToChildren","Map","_childrenToCellKey","_createClass2","key","value","add","list","cellKey","_this$_cellKeyToChild","invariant","has","cellLists","get","Set","set","remove","delete","size","forEach","fn","listSet","values","forEachInCell","_this$_cellKeyToChild2","anyInCell","_this$_cellKeyToChild3"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/@react-native/virtualized-lists/Lists/ChildListCollection.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection<TList> {\n  _cellKeyToChildren: Map<string, Set<TList>> = new Map();\n  _childrenToCellKey: Map<TList, string> = new Map();\n\n  add(list: TList, cellKey: string): void {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list: TList): void {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn: TList => void): void {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey: string, fn: TList => void): void {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey: string, fn: TList => boolean): boolean {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size(): number {\n    return this._childrenToCellKey.size;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}