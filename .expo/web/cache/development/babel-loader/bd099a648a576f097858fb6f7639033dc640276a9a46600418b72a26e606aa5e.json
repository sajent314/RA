{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.PerformanceObserverEntryList = void 0;\nexports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _warnOnce = _interopRequireDefault(require(\"../Utilities/warnOnce\"));\nvar _NativePerformanceObserver = _interopRequireDefault(require(\"./NativePerformanceObserver\"));\nvar _PerformanceEntry = require(\"./PerformanceEntry\");\nvar _RawPerformanceEntry = require(\"./RawPerformanceEntry\");\nvar PerformanceObserverEntryList = exports.PerformanceObserverEntryList = function () {\n  function PerformanceObserverEntryList(entries) {\n    (0, _classCallCheck2.default)(this, PerformanceObserverEntryList);\n    this._entries = entries;\n  }\n  return (0, _createClass2.default)(PerformanceObserverEntryList, [{\n    key: \"getEntries\",\n    value: function getEntries() {\n      return this._entries;\n    }\n  }, {\n    key: \"getEntriesByType\",\n    value: function getEntriesByType(type) {\n      return this._entries.filter(function (entry) {\n        return entry.entryType === type;\n      });\n    }\n  }, {\n    key: \"getEntriesByName\",\n    value: function getEntriesByName(name, type) {\n      if (type === undefined) {\n        return this._entries.filter(function (entry) {\n          return entry.name === name;\n        });\n      } else {\n        return this._entries.filter(function (entry) {\n          return entry.name === name && entry.entryType === type;\n        });\n      }\n    }\n  }]);\n}();\nvar observerCountPerEntryType = new Map();\nvar registeredObservers = new Map();\nvar isOnPerformanceEntryCallbackSet = false;\nvar onPerformanceEntry = function onPerformanceEntry() {\n  var _entryResult$entries;\n  if (!_NativePerformanceObserver.default) {\n    return;\n  }\n  var entryResult = _NativePerformanceObserver.default.popPendingEntries();\n  var rawEntries = (_entryResult$entries = entryResult == null ? void 0 : entryResult.entries) != null ? _entryResult$entries : [];\n  var droppedEntriesCount = entryResult == null ? void 0 : entryResult.droppedEntriesCount;\n  if (rawEntries.length === 0) {\n    return;\n  }\n  var entries = rawEntries.map(_RawPerformanceEntry.rawToPerformanceEntry);\n  var _loop = function _loop(observerConfig) {\n    var entriesForObserver = entries.filter(function (entry) {\n      if (!observerConfig.entryTypes.has(entry.entryType)) {\n        return false;\n      }\n      var durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n      return entry.duration >= (durationThreshold != null ? durationThreshold : 0);\n    });\n    observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);\n  };\n  for (var _ref of registeredObservers.entries()) {\n    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n    var _observer = _ref2[0];\n    var observerConfig = _ref2[1];\n    _loop(observerConfig);\n  }\n};\nfunction warnNoNativePerformanceObserver() {\n  (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');\n}\nfunction applyDurationThresholds() {\n  var durationThresholds = Array.from(registeredObservers.values()).map(function (config) {\n    return config.entryTypes;\n  }).reduce(function (accumulator, currentValue) {\n    return union(accumulator, currentValue);\n  }, new Map());\n  for (var _ref3 of durationThresholds) {\n    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n    var entryType = _ref4[0];\n    var durationThreshold = _ref4[1];\n    _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.setDurationThreshold((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType), durationThreshold != null ? durationThreshold : 0);\n  }\n}\nvar PerformanceObserver = exports.default = function () {\n  function PerformanceObserver(callback) {\n    (0, _classCallCheck2.default)(this, PerformanceObserver);\n    this._callback = callback;\n  }\n  return (0, _createClass2.default)(PerformanceObserver, [{\n    key: \"observe\",\n    value: function observe(options) {\n      var _registeredObservers$;\n      if (!_NativePerformanceObserver.default) {\n        warnNoNativePerformanceObserver();\n        return;\n      }\n      this._validateObserveOptions(options);\n      var requestedEntryTypes;\n      if (options.entryTypes) {\n        this._type = 'multiple';\n        requestedEntryTypes = new Map(options.entryTypes.map(function (t) {\n          return [t, undefined];\n        }));\n      } else {\n        this._type = 'single';\n        requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);\n      }\n      var currentEntryTypes = (_registeredObservers$ = registeredObservers.get(this)) == null ? void 0 : _registeredObservers$.entryTypes;\n      var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;\n      if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n        return;\n      }\n      registeredObservers.set(this, {\n        callback: this._callback,\n        entryTypes: nextEntryTypes\n      });\n      if (!isOnPerformanceEntryCallbackSet) {\n        _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);\n        isOnPerformanceEntryCallbackSet = true;\n      }\n      var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());\n      for (var type of newEntryTypes) {\n        var _observerCountPerEntr;\n        if (!observerCountPerEntryType.has(type)) {\n          var rawType = (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type);\n          _NativePerformanceObserver.default.startReporting(rawType);\n        }\n        observerCountPerEntryType.set(type, ((_observerCountPerEntr = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr : 0) + 1);\n      }\n      applyDurationThresholds();\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (!_NativePerformanceObserver.default) {\n        warnNoNativePerformanceObserver();\n        return;\n      }\n      var observerConfig = registeredObservers.get(this);\n      if (!observerConfig) {\n        return;\n      }\n      for (var type of observerConfig.entryTypes.keys()) {\n        var _observerCountPerEntr2;\n        var numberOfObserversForThisType = (_observerCountPerEntr2 = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr2 : 0;\n        if (numberOfObserversForThisType === 1) {\n          observerCountPerEntryType.delete(type);\n          _NativePerformanceObserver.default.stopReporting((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type));\n        } else if (numberOfObserversForThisType !== 0) {\n          observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n        }\n      }\n      registeredObservers.delete(this);\n      if (registeredObservers.size === 0) {\n        _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);\n        isOnPerformanceEntryCallbackSet = false;\n      }\n      applyDurationThresholds();\n    }\n  }, {\n    key: \"_validateObserveOptions\",\n    value: function _validateObserveOptions(options) {\n      var type = options.type,\n        entryTypes = options.entryTypes,\n        durationThreshold = options.durationThreshold;\n      if (!type && !entryTypes) {\n        throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\");\n      }\n      if (entryTypes && type) {\n        throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\");\n      }\n      if (this._type === 'multiple' && type) {\n        throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\");\n      }\n      if (this._type === 'single' && entryTypes) {\n        throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\");\n      }\n      if (entryTypes && durationThreshold !== undefined) {\n        throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\");\n      }\n    }\n  }]);\n}();\nPerformanceObserver.supportedEntryTypes = Object.freeze(['mark', 'measure', 'event']);\nfunction union(a, b) {\n  var res = new Map();\n  for (var _ref5 of a) {\n    var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);\n    var k = _ref6[0];\n    var v = _ref6[1];\n    if (!b.has(k)) {\n      res.set(k, v);\n    } else {\n      var _b$get;\n      res.set(k, Math.min(v != null ? v : 0, (_b$get = b.get(k)) != null ? _b$get : 0));\n    }\n  }\n  return res;\n}\nfunction difference(a, b) {\n  return new Set((0, _toConsumableArray2.default)(a).filter(function (x) {\n    return !b.has(x);\n  }));\n}","map":{"version":3,"names":["_warnOnce","_interopRequireDefault","require","_NativePerformanceObserver","_PerformanceEntry","_RawPerformanceEntry","PerformanceObserverEntryList","exports","entries","_classCallCheck2","default","_entries","_createClass2","key","value","getEntries","getEntriesByType","type","filter","entry","entryType","getEntriesByName","name","undefined","observerCountPerEntryType","Map","registeredObservers","isOnPerformanceEntryCallbackSet","onPerformanceEntry","_entryResult$entries","NativePerformanceObserver","entryResult","popPendingEntries","rawEntries","droppedEntriesCount","length","map","rawToPerformanceEntry","_loop","observerConfig","entriesForObserver","entryTypes","has","durationThreshold","get","duration","callback","observer","_ref","_ref2","_slicedToArray2","warnNoNativePerformanceObserver","warnOnce","applyDurationThresholds","durationThresholds","Array","from","values","config","reduce","accumulator","currentValue","union","_ref3","_ref4","setDurationThreshold","performanceEntryTypeToRaw","PerformanceObserver","_callback","observe","options","_registeredObservers$","_validateObserveOptions","requestedEntryTypes","_type","t","currentEntryTypes","nextEntryTypes","size","set","setOnPerformanceEntryCallback","newEntryTypes","difference","Set","keys","_observerCountPerEntr","rawType","startReporting","disconnect","_observerCountPerEntr2","numberOfObserversForThisType","delete","stopReporting","TypeError","Error","supportedEntryTypes","Object","freeze","a","b","res","_ref5","_ref6","k","v","_b$get","Math","min","_toConsumableArray2","x"],"sources":["C:/Users/stjones/Desktop/Ra_App/node_modules/react-native/Libraries/WebPerformance/PerformanceObserver.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {HighResTimeStamp, PerformanceEntryType} from './PerformanceEntry';\n\nimport warnOnce from '../Utilities/warnOnce';\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {PerformanceEntry} from './PerformanceEntry';\nimport {\n  performanceEntryTypeToRaw,\n  rawToPerformanceEntry,\n} from './RawPerformanceEntry';\n\nexport type PerformanceEntryList = $ReadOnlyArray<PerformanceEntry>;\n\nexport class PerformanceObserverEntryList {\n  _entries: PerformanceEntryList;\n\n  constructor(entries: PerformanceEntryList) {\n    this._entries = entries;\n  }\n\n  getEntries(): PerformanceEntryList {\n    return this._entries;\n  }\n\n  getEntriesByType(type: PerformanceEntryType): PerformanceEntryList {\n    return this._entries.filter(entry => entry.entryType === type);\n  }\n\n  getEntriesByName(\n    name: string,\n    type?: PerformanceEntryType,\n  ): PerformanceEntryList {\n    if (type === undefined) {\n      return this._entries.filter(entry => entry.name === name);\n    } else {\n      return this._entries.filter(\n        entry => entry.name === name && entry.entryType === type,\n      );\n    }\n  }\n}\n\nexport type PerformanceObserverCallback = (\n  list: PerformanceObserverEntryList,\n  observer: PerformanceObserver,\n  // The number of buffered entries which got dropped from the buffer due to the buffer being full:\n  droppedEntryCount?: number,\n) => void;\n\nexport type PerformanceObserverInit =\n  | {\n      entryTypes: Array<PerformanceEntryType>,\n    }\n  | {\n      type: PerformanceEntryType,\n      durationThreshold?: HighResTimeStamp,\n    };\n\ntype PerformanceObserverConfig = {|\n  callback: PerformanceObserverCallback,\n  // Map of {entryType: durationThreshold}\n  entryTypes: $ReadOnlyMap<PerformanceEntryType, ?number>,\n|};\n\nconst observerCountPerEntryType: Map<PerformanceEntryType, number> = new Map();\nconst registeredObservers: Map<PerformanceObserver, PerformanceObserverConfig> =\n  new Map();\nlet isOnPerformanceEntryCallbackSet: boolean = false;\n\n// This is a callback that gets scheduled and periodically called from the native side\nconst onPerformanceEntry = () => {\n  if (!NativePerformanceObserver) {\n    return;\n  }\n  const entryResult = NativePerformanceObserver.popPendingEntries();\n  const rawEntries = entryResult?.entries ?? [];\n  const droppedEntriesCount = entryResult?.droppedEntriesCount;\n  if (rawEntries.length === 0) {\n    return;\n  }\n  const entries = rawEntries.map(rawToPerformanceEntry);\n  for (const [observer, observerConfig] of registeredObservers.entries()) {\n    const entriesForObserver: PerformanceEntryList = entries.filter(entry => {\n      if (!observerConfig.entryTypes.has(entry.entryType)) {\n        return false;\n      }\n      const durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n      return entry.duration >= (durationThreshold ?? 0);\n    });\n    observerConfig.callback(\n      new PerformanceObserverEntryList(entriesForObserver),\n      observer,\n      droppedEntriesCount,\n    );\n  }\n};\n\nexport function warnNoNativePerformanceObserver() {\n  warnOnce(\n    'missing-native-performance-observer',\n    'Missing native implementation of PerformanceObserver',\n  );\n}\n\nfunction applyDurationThresholds() {\n  const durationThresholds: Map<PerformanceEntryType, ?number> = Array.from(\n    registeredObservers.values(),\n  )\n    .map(config => config.entryTypes)\n    .reduce(\n      (accumulator, currentValue) => union(accumulator, currentValue),\n      new Map(),\n    );\n\n  for (const [entryType, durationThreshold] of durationThresholds) {\n    NativePerformanceObserver?.setDurationThreshold(\n      performanceEntryTypeToRaw(entryType),\n      durationThreshold ?? 0,\n    );\n  }\n}\n\n/**\n * Implementation of the PerformanceObserver interface for RN,\n * corresponding to the standard in https://www.w3.org/TR/performance-timeline/\n *\n * @example\n * const observer = new PerformanceObserver((list, _observer) => {\n *   const entries = list.getEntries();\n *   entries.forEach(entry => {\n *     reportEvent({\n *       eventName: entry.name,\n *       startTime: entry.startTime,\n *       endTime: entry.startTime + entry.duration,\n *       processingStart: entry.processingStart,\n *       processingEnd: entry.processingEnd,\n *       interactionId: entry.interactionId,\n *     });\n *   });\n * });\n * observer.observe({ type: \"event\" });\n */\nexport default class PerformanceObserver {\n  _callback: PerformanceObserverCallback;\n  _type: 'single' | 'multiple' | void;\n\n  constructor(callback: PerformanceObserverCallback) {\n    this._callback = callback;\n  }\n\n  observe(options: PerformanceObserverInit): void {\n    if (!NativePerformanceObserver) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    this._validateObserveOptions(options);\n\n    let requestedEntryTypes;\n\n    if (options.entryTypes) {\n      this._type = 'multiple';\n      requestedEntryTypes = new Map(\n        options.entryTypes.map(t => [t, undefined]),\n      );\n    } else {\n      this._type = 'single';\n      requestedEntryTypes = new Map([\n        [options.type, options.durationThreshold],\n      ]);\n    }\n\n    // The same observer may receive multiple calls to \"observe\", so we need\n    // to check what is new on this call vs. previous ones.\n    const currentEntryTypes = registeredObservers.get(this)?.entryTypes;\n    const nextEntryTypes = currentEntryTypes\n      ? union(requestedEntryTypes, currentEntryTypes)\n      : requestedEntryTypes;\n\n    // This `observe` call is a no-op because there are no new things to observe.\n    if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n      return;\n    }\n\n    registeredObservers.set(this, {\n      callback: this._callback,\n      entryTypes: nextEntryTypes,\n    });\n\n    if (!isOnPerformanceEntryCallbackSet) {\n      NativePerformanceObserver.setOnPerformanceEntryCallback(\n        onPerformanceEntry,\n      );\n      isOnPerformanceEntryCallbackSet = true;\n    }\n\n    // We only need to start listenening to new entry types being observed in\n    // this observer.\n    const newEntryTypes = currentEntryTypes\n      ? difference(\n          new Set(requestedEntryTypes.keys()),\n          new Set(currentEntryTypes.keys()),\n        )\n      : new Set(requestedEntryTypes.keys());\n    for (const type of newEntryTypes) {\n      if (!observerCountPerEntryType.has(type)) {\n        const rawType = performanceEntryTypeToRaw(type);\n        NativePerformanceObserver.startReporting(rawType);\n      }\n      observerCountPerEntryType.set(\n        type,\n        (observerCountPerEntryType.get(type) ?? 0) + 1,\n      );\n    }\n    applyDurationThresholds();\n  }\n\n  disconnect(): void {\n    if (!NativePerformanceObserver) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    const observerConfig = registeredObservers.get(this);\n    if (!observerConfig) {\n      return;\n    }\n\n    // Disconnect this observer\n    for (const type of observerConfig.entryTypes.keys()) {\n      const numberOfObserversForThisType =\n        observerCountPerEntryType.get(type) ?? 0;\n      if (numberOfObserversForThisType === 1) {\n        observerCountPerEntryType.delete(type);\n        NativePerformanceObserver.stopReporting(\n          performanceEntryTypeToRaw(type),\n        );\n      } else if (numberOfObserversForThisType !== 0) {\n        observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n      }\n    }\n\n    // Disconnect all observers if this was the last one\n    registeredObservers.delete(this);\n    if (registeredObservers.size === 0) {\n      NativePerformanceObserver.setOnPerformanceEntryCallback(undefined);\n      isOnPerformanceEntryCallbackSet = false;\n    }\n\n    applyDurationThresholds();\n  }\n\n  _validateObserveOptions(options: PerformanceObserverInit): void {\n    const {type, entryTypes, durationThreshold} = options;\n\n    if (!type && !entryTypes) {\n      throw new TypeError(\n        \"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\",\n      );\n    }\n\n    if (entryTypes && type) {\n      throw new TypeError(\n        \"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\",\n      );\n    }\n\n    if (this._type === 'multiple' && type) {\n      throw new Error(\n        \"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\",\n      );\n    }\n\n    if (this._type === 'single' && entryTypes) {\n      throw new Error(\n        \"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\",\n      );\n    }\n\n    if (entryTypes && durationThreshold !== undefined) {\n      throw new TypeError(\n        \"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\",\n      );\n    }\n  }\n\n  static supportedEntryTypes: $ReadOnlyArray<PerformanceEntryType> =\n    Object.freeze(['mark', 'measure', 'event']);\n}\n\n// As a Set union, except if value exists in both, we take minimum\nfunction union<T>(\n  a: $ReadOnlyMap<T, ?number>,\n  b: $ReadOnlyMap<T, ?number>,\n): Map<T, ?number> {\n  const res = new Map<T, ?number>();\n  for (const [k, v] of a) {\n    if (!b.has(k)) {\n      res.set(k, v);\n    } else {\n      res.set(k, Math.min(v ?? 0, b.get(k) ?? 0));\n    }\n  }\n  return res;\n}\n\nfunction difference<T>(a: $ReadOnlySet<T>, b: $ReadOnlySet<T>): Set<T> {\n  return new Set([...a].filter(x => !b.has(x)));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}